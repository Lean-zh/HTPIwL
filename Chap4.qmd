# Relations

## 4.1. Ordered Pairs and Cartesian Products

Section 4.1 of *How To Prove It* defines the *Cartesian product* $A \times B$ of two sets $A$ and $B$ to be the set of all ordered pairs $(a, b)$, where $a \in A$ and $b \in B$.  However, in Lean, Cartesian product is an operation on *types*, not sets.  If `A` and `B` are types, then `A × B` is the type of ordered pairs `(a, b)`, where `a` has type `A` and `b` has type `B`.  In other words, if you have `a : A` and `b : B`, then `(a, b)` is an object of type `A × B`.  There is also notation for the first and second coordinates of an ordered pair.  If `p` has type `A × B`, then `p.1` is the first coordinate of `p`, and `p.2` is the second coordinate.  This means that `p = (p.1, p.2)`.  You can also use the notation `p.fst` for the first coordinate of `p` and `p.snd` for the second coordinate.

## 4.2. Relations

Section 4.2 of *HTPI* defines a *relation from $A$ to $B$* to be a subset of $A \times B$.  In other words, if $R$ is a relation from $A$ to $B$, then $R$ is a set whose element are ordered pairs $(a, b)$, where $a \in A$ and $b \in B$.  We will see in the next section that in Lean, it is convenient to use a somewhat different definition of relations.  Nevertheless, we will take some time in this section to study sets of ordered pairs.  If `A` and `B` are types, and `R` is a set whose elements are ordered pairs `(a, b)`, where `a` has type `A` and `b` has type `B`, then `R` has type `Set (A × B)`.

Section 4.2 of *HTPI* discusses several concepts concerning relations.  Here is how these concepts are defined in *HTPI*:

::: {.ndfn arguments="Definition 4.2.3"}
Suppose $R$ is a relation from $A$ to $B$.  Then the *domain* of $R$ is the set

::: {.quote}
$\text{Dom}(R) = \{a \in A \mid \exists b \in B((a, b) \in R)\}$.
:::

The *range* of $R$ is the set

::: {.quote}
$\text{Ran}(R) = \{b \in B \mid \exists a \in A((a, b) \in R)\}$.
:::

The *inverse* of $R$ is the relation $R^{-1}$ from $B$ to $A$ define as follows:

::: {.quote}
$R^{-1} = \{(b, a) \in B \times A \mid (a, b) \in R\}$.
:::

Finally, suppose $R$ is a relation from $A$ to $B$ and $S$ is a relation from $B$ to $C$.  Then the *composition* of $S$ and $R$ is the relation $S \circ R$ from $A$ to $C$ defined as follows:

::: {.quote}
$S \circ R = \{(a, c) \in A \times C \mid \exists b \in B((a, b) \in R \text{ and } (b, c) \in S)\}$.
:::
:::

There are several examples in *HTPI* that illustrate these definitions.  We will focus here on seeing how to work with these concepts in Lean.

We can write corresponding definitions in Lean as follows:

```lean
def Dom {A B : Type} (R : Set (A × B)) : Set A :=
    { a : A | ∃ (b : B), (a, b) ∈ R }
def Ran {A B : Type} (R : Set (A × B)) : Set B :=
    { b : B | ∃ (a : A), (a, b) ∈ R }
def inv {A B : Type} (R : Set (A × B)) : Set (B × A) :=
    { (b, a) : B × A | (a, b) ∈ R }
def comp {A B C : Type} (S : Set (B × C)) (R : Set (A × B)) :
    Set (A × C) := { (a, c) : A × C | ∃ (x : B), (a, x) ∈ R ∧ (x, c) ∈ S }
```

Definitions in Lean are introduced with the keyword `def`.  In the definition of `Dom`, we have declared that `A` and `B` are implicit arguments and `R` is an explicit argument.  That means that if we have `R : Set (A × B)`, then we can just write `Dom R` for the domain of `R`, and Lean will figure out for itself what `A` and `B` are.  After the list of arguments there is a colon and then the type of `Dom R`, which is `Set A`.  This is followed by `:=` and then the definition of `Dom R`.  The definition says that `Dom R` is the set of all objects `a` of type `A` such that there is some `b` of type `B` with `(a, b) ∈ R`.  This is a direct translation, into Lean's type-theory language, of the first part of Definition 4.2.3.  The other three definitions are similar; they define `Ran R` to be the range of `R`, `inv R` to be the inverse of `R`, and `comp S R` to be the composition of `S` and `R`.

Here is the main theorem about these concepts, as stated in *HTPI*:

::: {.nthm arguments="Theorem 4.2.5"}
Suppose $R$ is a relation from $A$ to $B$, $S$ is a relation from $B$ to $C$, and $T$ is a relation from $C$ to $D$.  Then:

1.  $(R^{-1})^{-1} = R$.
2.  $\mathrm{Dom}(R^{-1}) = \mathrm{Ran}(R)$.
3.  $\mathrm{Ran}(R^{-1}) = \mathrm{Dom}(R)$.
4.  $T \circ (S \circ R) = (T \circ S) \circ R$.
5.  $(S \circ R)^{-1} = R^{-1} \circ S^{-1}$.
:::

All five parts of this theorem follow directly from the definitions of the relevant concepts.  In fact, in the first three parts, Lean recognizes the two sides of the equation as being definitionally equal, and therefore the tactic `rfl` proves those parts:

```lean
theorem Theorem_4_2_5_1 {A B : Type}
    (R : Set (A × B)) : inv (inv R) = R := by rfl

theorem Theorem_4_2_5_2 {A B : Type}
    (R : Set (A × B)) : Dom (inv R) = Ran R := by rfl

theorem Theorem_4_2_5_3 {A B : Type}
    (R : Set (A × B)) : Ran (inv R) = Dom R := by rfl
```

The fourth part will take a little more work to prove.  We start the proof like this:

```lean
theorem Theorem_4_2_5_4 {A B C D : Type}
    (R : Set (A × B)) (S : Set (B × C)) (T : Set (C × D)) :
    comp T (comp S R) = comp (comp T S) R := by
  apply Set.ext
  fix (a, d) : A × D
```

After the `apply Set.ext` tactic, the goal is

::: {.quote}
`∀ (x : A × D), x ∈ comp T (comp S R) ↔ x ∈ comp (comp T S) R`
:::

The next step should be to introduce an arbitrary object of type `A × D`.  We could just call this object `x`, but Lean let's us use a shortcut here.  An object of type `A × D` must have the form of an ordered pair, where the first coordinate has type `A` and the second has type `D`.  So Lean let's us write it as an ordered pair right away.  That's what we've done in the second step, `fix (a, d) : A × D`.  This tactic introduces two new variables into the proof, `a : A` and `d : D`.  (The proof in *HTPI* uses a similar shortcut.  And we used a similar shortcut in the definitions of `inv R` and `comp R`, where the elements of these sets were written as ordered pairs.)

Here is the complete proof.

```lean
theorem Theorem_4_2_5_4 {A B C D : Type}
    (R : Set (A × B)) (S : Set (B × C)) (T : Set (C × D)) :
    comp T (comp S R) = comp (comp T S) R := by
  apply Set.ext
  fix (a, d) : A × D
  apply Iff.intro
  -- (→)
  assume h1 : (a, d) ∈ comp T (comp S R)
                     --Goal:  (a, d) ∈ comp (comp T S) R
  define             --Goal: ∃ (x : B), (a, x) ∈ R ∧ (x, d) ∈ comp T S
  define at h1       --h1: ∃ (x : C), (a, x) ∈ comp S R ∧ (x, d) ∈ T
  obtain (c : C) (h2 : (a, c) ∈ comp S R ∧ (c, d) ∈ T) from h1
  have h3 : (a, c) ∈ comp S R := h2.left
  define at h3       --h3: ∃ (x : B), (a, x) ∈ R ∧ (x, c) ∈ S
  obtain (b : B) (h4 : (a, b) ∈ R ∧ (b, c) ∈ S) from h3
  apply Exists.intro b    --Goal:  (a, b) ∈ R ∧ (b, d) ∈ comp T S
  apply And.intro h4.left --Goal:  (b, d) ∈ comp T S
  define                  --Goal:  ∃ (x : C), (b, x) ∈ S ∧ (x, d) ∈ T
  show ∃ (x : C), (b, x) ∈ S ∧ (x, d) ∈ T from
    Exists.intro c (And.intro h4.right h2.right)
  -- (←)
  assume h1 : (a, d) ∈ comp (comp T S) R
  define; define at h1
  obtain (b : B) (h2 : (a, b) ∈ R ∧ (b, d) ∈ comp T S) from h1
  have h3 : (b, d) ∈ comp T S := h2.right
  define at h3
  obtain (c : C) (h4 : (b, c) ∈ S ∧ (c, d) ∈ T) from h3
  apply Exists.intro c
  apply And.intro _ h4.right
  define
  show ∃ (x : B), (a, x) ∈ R ∧ (x, c) ∈ S from
    Exists.intro b (And.intro h2.left h4.left)
```

Of course, if you have trouble reading this proof, you can type it into Lean and see how the tactic state changes over the course of the proof.

The proof of part 5 of the theorem is similar.  We'll leave it as an exercise for you.

## 4.3. More About Relations

Section 4.3 of *HTPI* introduces new notation for working with relations.  If $R \subseteq A \times B$, $a \in A$, and $b \in B$, then *HTPI* introduces the notation $aRb$ as an alternative way of saying $(a, b) \in R$.

The notation we will use in Lean is slightly different.  Corresponding to the notation $aRb$ in *HTPI*, in Lean we will use the notation `R a b`.  And we cannot use this notation when `R` has type `Set (A × B)`.  Rather, we will need to introduce a new type for the variable `R` in the notation `R a b`.  The name we will use for this new type is `Rel A B`.  Thus, if `R` has type `Rel A B`, `a` has type `A`, and `b` has type `B`, then `R a b` is a proposition.  This should remind you of the way predicates work in Lean.  If we have `P : Pred A`, then we think of `P` as representing a property that an object of type `A` might have, and if we also have `a : A`, then `P a` is the proposition asserting that `a` has the property represented by `P`.  Similarly, if we have `R : Rel A B`, then we can think of `R` as representing a relationship that might hold between an object of type `A` and an object of type `B`, and if we also have `a : A` and `b : B`, then `R a b` is the proposition asserting that the relationship represented by `R` holds between `a` and `b`.

Notice that in *HTPI*, the same variable $R$ is used in both the notation $aRb$ and $(a, b) \in R$.  But in Lean, the notation `R a b` is used when `R` has type `Rel A B`, and the notation `(a, b) ∈ R` is used when `R` has type `Set (A × B)`.  The types `Rel A B` and `Set (A × B)` are different, so we cannot use the same variable `R` in the two notations.  However, there is a correspondence between the two types.  Suppose `R` has type `Rel A B`.  If we let `R'` denote the set of all ordered pairs `(a, b) : A × B` such that the proposition `R a b` is true, then `R'` has type `Set (A × B)`.  And there is then a simple relationship between `R` and `R'`: for any objects `a : A` and `b : B`, the propositions `R a b` and `(a, b) ∈ R'` are equivalent.  For our work in Lean, we will say that `R` is a *relation* from `A` to `B`, and `R'` is the *extension* of `R`.

We can define the extension of a relation in Lean as follows:

```lean
def extension {A B : Type} (R : Rel A B) : Set (A × B) :=
    {(a, b) : A × B | R a b}
```

The rest of Chapter 4 of *HTPI* focuses on relations from a set to itself; in Lean, the corresponding idea is a relation from a type to itself.  If `A` is any type and `R` has type `Rel A A`, then we will say that `R` is a *binary relation on `A`*.  We define `BinRel A` to be the type of binary relations on `A`.  In other words, `BinRel A` is just an abbreviation for `Rel A A`.  If `R` is a binary relation on `A`, then we say that `R` is *reflexive* if for every `a` of type `A`, `R a a` holds.  It is *symmetric* if for all `a` and `b` of type `A`, if `R a b` then `R b a`.  And it is *transitive* if for all `a`, `b`, and `c` of type `A`, if `R a b` and `R b c` then `R a c`.  Of course, we can tell Lean about these definitions:

```lean
def reflexive {A : Type} (R : BinRel A) : Prop :=
    ∀ (a : A), R a a
def symmetric {A : Type} (R : BinRel A) : Prop :=
    ∀ (a b : A), R a b → R b a
def transitive {A : Type} (R : BinRel A) : Prop :=
    ∀ (a b c : A), R a b → R b c → R a c
```

Once again, we refer you to *HTPI* to see examples of these concepts, and we focus here on proving theorems about these concepts in Lean.  The main theorem about these concepts in Section 4.3 of *HTPI* is Theorem 4.3.4.  Here is what it says:

::: {.nthm arguments="Theorem 4.3.4"}
Suppose $R$ is a relation on a set $A$.

1.  $R$ is reflexive iff $\{(x, y) \in A \times A \mid x = y\} \subseteq R$.
2.  $R$ is symmetric iff $R = R^{-1}$.
3.  $R$ is transitive iff $R \circ R \subseteq R$.
:::

We can prove corresponding statements in Lean, but we'll have to be careful to distinguish between the types `BinRel A` and `Set (A × A)`.  In *HTPI*, each of the three statements in the theorem uses the same letter $R$ on both sides of the "iff", but we can't write the statements that way in Lean.  In each statement, the part before "iff" uses a concept that was defined for objects of type `BinRel A`, whereas the part after "iff" uses concepts that only make sense for objects of type `Set (A × A)`.  So we'll have to rephrase the statements by using the correspondence between a relation `R` of type `BinRel A` and its extension, which has type `Set (A × A)`.  Here's the Lean theorem corresponding to statement 2 of Theorem 4.3.4:

```lean
theorem Theorem_4_3_4_2 {A : Type} (R : BinRel A) :
    symmetric R ↔ extension R = inv (extension R) := by
  apply Iff.intro
  -- (→)
  assume h1 : symmetric R
  apply Set.ext
  fix (a, b) : A × A
  --Goal:  (a, b) ∈ extension R ↔ (a, b) ∈ inv (extension R)
  --Next we fill in the definitions of both sides of the goal
  define : (a, b) ∈ extension R
  define : (a, b) ∈ inv (extension R)  --Goal:  R a b ↔ R b a
  define at h1  --h1: ∀ (a b : A), R a b → R b a
  show R a b ↔ R b a from Iff.intro (h1 a b) (h1 b a)
  -- (←)
  assume h1 : extension R = inv (extension R)
  define  --Goal:  ∀ (a b : A), R a b → R b a
  fix a : A; fix b : A
  assume h2 : R a b  --Goal:  R b a
  have h3 : (a, b) ∈ extension R := h2  --h2, h3 are definitionally equal
  rewrite [h1] at h3
  define at h3
  show R b a from h3
```

We'll leave the proofs of the other two statements as exercises for you.

## 4.4. Ordering Relations