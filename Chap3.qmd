# Proofs

## 3.1 & 3.2. Proofs Involving Negations and Conditionals

Sections 3.1 and 3.2 of *How To Prove It* present strategies for dealing with givens and goals involving negations and conditionals.  We restate those strategies here, and explain how to use them with Lean.

Section 3.1 gives two strategies for proving a goal of the form `P → Q`:

#### To prove a goal of the form `P → Q`:

1.  Assume `P` is true and prove `Q`.
2.  Assume `Q` is false and prove that `P` is false.

We've already seen how to carry out both of these strategies in Lean.  For the first strategy, use the `assume` tactic to introduce the assumption `P` and assign an identifier to it; Lean will automaticall set `Q` as the goal.  We can summarize the effect of using this strategy by showing how the tactic state changes if you use the tactic `assume h : P`:

::: {.lftrt}
::: {.bef}
```state
!! ⋮
⊢ P → Q
```
:::

::: {.aft}
```state
!! ⋮
h : P
⊢ Q
```
:::
:::

The second strategy is justified by the contrapositive law.  In Lean, you can use the `contrapos` tactic to rewrite the goal as `¬Q → ¬P` and then use the tactic `assume h : ¬Q`.  The net effect of these two tactics is:

::: {.lftrt}
::: {.bef}
```state
!! ⋮
⊢ P → Q
```
:::

::: {.aft}
```state
!! ⋮
h : ¬Q
⊢ ¬P
```
:::
:::

Section 3.2 gives two strategies for using givens of the form `P → Q`, with the second once again being a variation on the first based on the contrapositive law:

#### To use a given of the form `P → Q`:

1.  If you are also given `P`, or you can prove that `P` is true, then you can use this given to conclude that `Q` is true.
2.  If you are also given `¬Q`, or you can prove that `Q` is false, then you can use this given to conclude that `P` is false.

The first strategy is the modus ponens rule of inference, and we saw in the last chapter that if you have `h1 : P → Q` and `h2 : P`, then `h1 h2` is a (term-mode) proof of `Q`; often we use this rule with the `have` or `show` tactic.  For the second strategy, if you have `h1 : P → Q` and `h2 : ¬Q`, then the `contrapos at h1` tactic will change `h1` to `h1 : ¬Q → ¬P`, and then `h1 h2` will be a proof of `¬P`.

All of the strategies listed above for working with conditional statements as givens or goals were illustrated in examples in the last chapter.

Section 3.2 of *HTPI* offers two strategies for proving negative goals:

#### To prove a goal of the form `¬P`:

1.  Reexpress the goal in some other form.
2.  Use proof by contradiction: assume `P` is true and try to deduce a contradiction.

For the first strategy, the tactics `demorgan`, `conditional`, and `double_neg` may be useful, and we saw how those tactics work in the last chapter.  But how do you write a proof by contradiction in Lean?  The answer is to use a tactic called `by_contra`.  If the goal is `¬P`, then the tactic `by_contra h` will introduce the assumption `h : P` and set the goal to be `False`, like this:

::: {.lftrt}
::: {.bef}
```state
!! ⋮
⊢ ¬P
```
:::

::: {.aft}
```state
!! ⋮
h : P
⊢ False
```
:::
:::

In Lean, `False` represents a statement that is always false---that is, a contradiction, as that term is defined in Section 1.2 of *HTPI*.  The `by_contra` tactic can actually be used even if the goal is not a negative statement.  If the goal is a statement `P` that is not a negative statement, then `by_contra h` will initiate a proof by contradiction by introducing the assumption `h : ¬P` and setting the goal to be `False`.

You will usually complete a proof by contradiction by deducing two contradictory statements---say, `h1 : Q` and `h2 : ¬Q`.  But how do you convince Lean that the proof is over?  You must be able to prove the goal `False` from the two givens `h1` and `h2`.  There are two ways to do this.  The first is based on the fact that Lean treats a statement of the form `¬Q` as meaning the same thing as `Q → False`.  This makes sense, because these statements are logically equivalent, as shown by the following truth table:

::: {style="margin: 0% 20%"}
| `Q` | `¬Q` | `(Q` | `→` | `False)`|
|:----------:|:----------:|-:|:-:|:-|
| F | T | F | T | &nbsp;&nbsp;[&nbsp;]{.excl} F |
| T | F | T | F | &nbsp;&nbsp;[&nbsp;]{.excl} F |
:::

Thinking of `h2 : ¬Q` as meaning `h2 : Q → False`, we can combine it with `h1 : Q` using modus ponens to deduce `False`.  In other words, `h2 h1` is a proof of `False`.

But there is a second way of completing the proof that it is worthwhile to know about.  From contradictory statements `h1 : Q` and `h2 : ¬Q` you can validly deduce *any* statement.  This follows from the definition of a *valid argument* in Section 1.1 of *HTPI*.  According to that definition, you can validly infer a conclusion `R` from premises `h1 : Q` and `h2 : ¬Q` if the premises cannot both be true without the conclusion also being true.  In this case, that standard is met, for the simple reason that the premises cannot both be true!  (This gives part of the answer to exercise 18 in Section 1.2 of *HTPI*.)  Thus, Lean has a rule that allows you to prove any statement from contradictory premises.  If you have `h1 : Q` and `h2 : ¬Q`, then Lean will recognize `absurd h1 h2` as a (term-mode) proof of *any* statement.

To summarize, if you have `h1 : Q` and `h2 : ¬Q`, then there are two ways to prove `False`.  Lean will recognize `h2 h1` as a proof of `False`, and it will recognize `absurd h1 h2` as a proof of any statement, including `False`.  Notice the difference in the order in which `h1` and `h2` are listed in these two proofs: In the first one, the negative statement `h2` must come first, just as the conditional statement must come first in an application of modus ponens.  But in a proof using `absurd`, the negative statement must come second.

To illustrate proof by contradiction in Lean, let's redo our first example from the last Chapter in a different way.  That example was based on Example 3.2.4 in *HTPI*.  We'll begin with the same first two steps, introducing two assumptions.  (We won't bother to include the `done` line in the displays below.)

::: {.inout}
::: {.inpt}
```lean
theorem Example_3_2_4_v2 (P Q R : Prop)
(h : P → (Q → R)) : ¬R → (P → ¬Q) := by
  assume h2 : ¬R
  assume h3 : P
```
:::

::: {.outpt}
```state
P Q R : Prop
h : P → Q → R
h2 : ¬R
h3 : P
⊢ ¬Q
```
:::
:::

Now the goal is a negative statement, so we use the tactic `by_contra h4` to introduce the assumption `h4 : Q` and set the goal to be `False`:

::: {.inout}
::: {.inpt}
```lean
theorem Example_3_2_4_v2 (P Q R : Prop)
(h : P → (Q → R)) : ¬R → (P → ¬Q) := by
  assume h2 : ¬R
  assume h3 : P
  by_contra h4
```
:::

::: {.outpt}
```state
P Q R : Prop
h : P → Q → R
h2 : ¬R
h3 : P
h4 : Q
⊢ False
```
:::
:::

Using the givens `h`, `h3`, and `h4` we can deduce first `Q → R` and then `R` by two applications of modus ponens:

::: {.inout}
::: {.inpt}
```lean
theorem Example_3_2_4_v2 (P Q R : Prop)
(h : P → (Q → R)) : ¬R → (P → ¬Q) := by
  assume h2 : ¬R
  assume h3 : P
  by_contra h4
  have h5 : Q → R := h h3
  have h6 : R := h5 h4
```
:::

::: {.outpt}
```state
P Q R : Prop
h : P → Q → R
h2 : ¬R
h3 : P
h4 : Q
h5 : Q → R
h6 : R
⊢ False
```
:::
:::

Now we have a contradiction: `h2 : ¬R` and `h6 : R`.  To complete the proof, we deduce `False` from these two givens.  Either `h2 h6` or `absurd h6 h2` would be accepted by Lean as a proof of `False`:

::: {.inout}
::: {.inpt}
```lean
theorem Example_3_2_4_v2 (P Q R : Prop)
(h : P → (Q → R)) : ¬R → (P → ¬Q) := by
  assume h2 : ¬R
  assume h3 : P
  by_contra h4
  have h5 : Q → R := h h3
  have h6 : R := h5 h4
  show False from h2 h6
```
:::

::: {.outpt}
```state
!!Goals accomplished 🎉
```
:::
:::

Finally, we have two strategies for using a given that is a negative statement:

#### To use a given of the form `¬P`:

1.  Reexpress the given in some other form.
2.  If you are doing a proof by contradiction, you can achieve a contradiction by proving `P`, since that would contradict the given `¬P`.

Of course, strategy 1 suggests the use of the `demorgan`, `conditional`, and `double_neg` tactics, if they apply.  For strategy 2, if you are doing a proof by contradiction and you have a given `h : ¬P`, then the tactic `contradict h` will set the goal to be `P`, which will complete the proof by contradicting `h`.  In fact, this tactic can be used with any given; if you have a given `h : P`, where `P` is not a negative statement, then `contradict h` will set the goal to be `¬P`.  You can also follow the word `contradict` with a proof that is more complicated than a single identifier.  For example, if you have givens `h1 : P → ¬Q` and `h2 : P`, then `h1 h2` is a proof of `¬Q`, so the tactic `contradict (h1 h2)` will set the goal to be `Q`.

If you're not doing a proof by contradiction, then the tactic `contradict h with h'` will first initiate a proof by contradiction by assuming the negation of the goal, giving that assumption the identifier `h'`, and then it will set the goal to be the negation of the statement proven by `h`.  In other words, `contradict h with h'` is shorthand for `by_contra h'; contradict h`.

We can illustrate this with yet another way to write the proof from Example 3.2.4.  Our first three steps will be the same as last time:

::: {.inout}
::: {.inpt}
```lean
theorem Example_3_2_4_v3 (P Q R : Prop)
(h : P → (Q → R)) : ¬R → (P → ¬Q) := by
  assume h2 : ¬R
  assume h3 : P
  by_contra h4
```
:::

::: {.outpt}
```state
P Q R : Prop
h : P → Q → R
h2 : ¬R
h3 : P
h4 : Q
⊢ False
```
:::
:::

Since we are now doing a proof by contradiction and the given `h2 : ¬R` is a negative statement, a likely way to proceed is to try to prove `R`, which would contradict `h2`.  So we use the tactic `contradict h2`:

::: {.inout}
::: {.inpt}
```lean
theorem Example_3_2_4_v3 (P Q R : Prop)
(h : P → (Q → R)) : ¬R → (P → ¬Q) := by
  assume h2 : ¬R
  assume h3 : P
  by_contra h4
  contradict h2
```
:::

::: {.outpt}
```state
P Q R : Prop
h : P → Q → R
h2 : ¬R
h3 : P
h4 : Q
⊢ R
```
:::
:::

As before, we can now prove `R` by combining `h`, `h3`, and `h4`.  In fact, we could do it in one step: by modus ponens, `h h3` is a proof of `Q → R`, and therefore, by another application of modus ponens, `(h h3) h4` is a proof of `R`.  The parentheses here are not necessary; Lean will interpret `h h3 h4` as `(h h3) h4`, so we can complete the proof like this:

::: {.inout}
::: {.inpt}
```lean
theorem Example_3_2_4_v3 (P Q R : Prop)
(h : P → (Q → R)) : ¬R → (P → ¬Q) := by
  assume h2 : ¬R
  assume h3 : P
  by_contra h4
  contradict h2
  show R from h h3 h4
```
:::

::: {.outpt}
```state
!!Goals accomplished 🎉
```
:::
:::

You could shorten this proof slightly by replacing the lines `by_contra h4` and `contradict h2` with the single line `contradict h2 with h4`.

There is one more idea that is introduced in Section 3.2 of *HTPI*.  The last example in that section illustrates how you can sometimes use rules of inference to work backwards.  Here's a similar example in Lean:

::: {.inout}
::: {.inpt}
```lean
theorem Like_Example_3_2_5
(U : Type) (A B C : Set U) (a : U)
(h1 : a ∈ A) (h2 : a ∉ A \ B)
(h3 : a ∈ B → a ∈ C) : a ∈ C := by
```
:::

::: {.outpt}
```state
U : Type
A B C : Set U
a : U
h1 : a ∈ A
h2 : ¬a ∈ A \ B
h3 : a ∈ B → a ∈ C
⊢ a ∈ C
```
:::
:::

The goal is `a ∈ C`, and the only given that even mentions `C` is `h3 : a ∈ B → a ∈ C`.  If only we could prove `a ∈ B`, then we could apply `h3`, using modus ponens, to reach our goal.  So it would make sense to work toward the goal of proving `a ∈ B`.

To get Lean to use this proof strategy, we use the tactic `apply h3 _`.  The underscore here represents a blank to be filled in by Lean.  You might think of this tactic as asking Lean the question: If we want `h3 _` to be a proof of the goal `a ∈ C`, what do we have to put in the blank?  Lean is able to figure out that the answer is: a proof of `a ∈ B`.  So it sets the goal to be `a ∈ B`, since a proof of that goal, when inserted into the blank in `h3 _`, would prove the original goal `a ∈ C`:

::: {.inout}
::: {.inpt}
```lean
theorem Like_Example_3_2_5
(U : Type) (A B C : Set U) (a : U)
(h1 : a ∈ A) (h2 : a ∉ A \ B)
(h3 : a ∈ B → a ∈ C) : a ∈ C := by
  apply h3 _
```
:::

::: {.outpt}
```state
U : Type
A B C: Set U
a : U
h1 : a ∈ A
h2 : ¬a ∈ A \ B
h3 : a ∈ B → a ∈ C
⊢ a ∈ B
```
:::
:::

It may not be clear what to do next, but the given `h2` is a negative statement, so perhaps reexpressing it will help.  Writing out the definition of set difference, `h2` means `¬(a ∈ A ∧ a ∉ B)`, and then one of De Morgan's laws and a conditional law allow us to rewrite it first as `a ∉ A ∨ a ∈ B` and then as `a ∈ A → a ∈ B`.  Of course, we have tactics to accomplish all of these reexpressions:

::: {.inout}
::: {.inpt}
```lean
theorem Like_Example_3_2_5
(U : Type) (A B C : Set U) (a : U)
(h1 : a ∈ A) (h2 : a ∉ A \ B)
(h3 : a ∈ B → a ∈ C) : a ∈ C := by
  apply h3 _
  define at h2
  demorgan at h2; conditional at h2
```
:::

::: {.outpt}
```state
U : Type
A B C : Set U
a : U
h1 : a ∈ A
h2 : a ∈ A → a ∈ B
h3 : a ∈ B → a ∈ C
⊢ a ∈ B
```
:::
:::

And now it is easy to complete the proof by applying modus ponens, using `h2` and `h1`:

::: {.inout}
::: {.inpt}
```lean
theorem Like_Example_3_2_5
(U : Type) (A B C : Set U) (a : U)
(h1 : a ∈ A) (h2 : a ∉ A \ B)
(h3 : a ∈ B → a ∈ C) : a ∈ C := by
  apply h3 _
  define at h2
  demorgan at h2; conditional at h2
  show a ∈ B from h2 h1
```
:::

::: {.outpt}
```state
!!Goals accomplished 🎉
```
:::
:::

We will see many more uses of the `apply` tactic later in this book.

Sections 3.1 and 3.2 of *HTPI* contain several proofs that involve algebraic reasoning.  Although one can do such proofs in Lean, it requires ideas that we are not ready to introduce yet.  So for the moment we will stick to proofs involving only logic and set theory.

## 3.3. Proofs Involving Quantifiers

In the notation used in *HTPI*, if $P(x)$ is a statement about $x$, then $\forall x\, P(x)$ means "for all $x$, $P(x)$," and $\exists x\, P(x)$ means "there exists at least one $x$ such that $P(x)$."  The letter $P$ here does not stand for a proposition; it is only when it is applied to some object $x$ that we get a proposition.  We will say that $P$ is a *predicate*, and when we apply $P$ to an object $x$ we get a proposition $P(x)$.  You might want to think of the predicate $P$ as representing some property that an object might have, and the proposition $P(x)$ asserts that $x$ has that property.

To use a predicate in Lean, you must tell Lean the type of objects to which it applies.  If `U` is a type, then `Pred U` is the type of predicates that apply to objects of type `U`.  If `P` has type `Pred U` (that is, `P` is a predicate applying to objects of type `U`) and `x` has type `U`, then to apply `P` to `x` we just write `P x` (with a space but no parentheses).  Thus, if we have `P : Pred U` and `x : U`, then `P x` is an expression of type `Prop`.  That is, `P x` is a proposition, and its meaning is that `x` has the property represented by the predicate `P`.

There are a few differences between the way quantified statements are written in *HTPI* and the way they are written in Lean.  First of all, when we apply a quantifier to a variable in Lean we will specify the type of the variable explicitly.  Also, Lean requires that after specifying the variable and its type, you must put a comma before the proposition to which the quantifier is applied.  Thus, if `P` has type `Pred U`, then to say that `P` holds for all objects of type `U` we would write `∀ (x : U), P x`.  Similarly, `∃ (x : U), P x` is the proposition asserting that there exists at least one `x` of type `U` such that `P x`.

And there is one more important difference between the way quantified statements are written in *HTPI* and Lean.  In *HTPI*, a quantifier is interpreted as applying to as little as possible.  Thus, $\forall x\, P(x) \wedge Q(x)$ is interpreted as $(\forall x\, P(x)) \wedge Q(x)$; if you want the quantifier $\forall x$ to apply to the entire statement $P(x) \wedge Q(x)$ you must use parentheses and write $\forall x(P(x) \wedge Q(x))$.  The convention in Lean is exactly the opposite:  a quantifier applies to as much as possible.  Thus, Lean will interpret `∀ (x : U), P x ∧ Q x` as meaning `∀ (x : U), (P x ∧ Q x)`.  If you want the quantifier to apply to only `P x`, then you must use parentheses and write `(∀ (x : U), P x) ∧ Q x`.

With this preparation, we are ready to consider how to write proofs involving quantifiers in Lean.  The most common way to prove a goal of the form `∀ (x : U), P x` is to use the following strategy:

#### To prove a goal of the form `∀ (x : U), P x`:

::: {.ind}
Let `x` stand for an arbitrary object of type `U` and prove `P x`.  If the letter `x` is already being used in the proof to stand for something, then you must choose an unused variable, say `y`, to stand for the arbitrary object, and prove `P y`.
:::

To do this in Lean, you should use the tactic `fix x : U`, which tells Lean to treat `x` as standing for some fixed but arbitrary object of type `U`.  This has the following effect on the tactic state:

::: {.lftrt}
::: {.bef}
```state
!! ⋮
⊢ ∀ (x : U), P x
```
:::

::: {.aft}
```state
!! ⋮
x : U
⊢ P x
```
:::
:::

To use a given of the form `∀ (x : U), P x`, we usually apply a rule of inference called *universal instantiation*, which is described by the following proof strategy:

#### To use a given of the form `∀ (x : U), P x`:

::: {.ind}
You may plug in any value of type `U`, say `a`, for `x` and use this given to conclude that `P a` is true.
:::

This strategy says that if you have `h : ∀ (x : U), P x` and `a : U`, then you can infer `P a`.  Indeed, in this situation Lean will recognize `h a` as a proof of `P a`.  For example, you can write `have h' : P a := h a` in a Lean tactic-mode proof, and Lean will add `h' : P a` to the tactic state.

Let's try these strategies out in a Lean proof.  In Lean, if you don't want to give a theorem a name, you can simply call it an `example` rather than a `theorem`, and then there is no need to give it a name.  In the following theorem, you can enter the symbol `∀` by typing `\forall` or `\all`, and you can enter `∃` by typing `\exists` or `\ex`.

::: {.inout}
::: {.inpt}
```lean
example (U : Type) (P Q : Pred U)
(h1 : ∀ (x : U), P x → ¬Q x)
(h2 : ∀ (x : U), Q x) :
¬∃ (x : U), P x := by
```
:::

::: {.outpt}
```state
U : Type
P Q : Pred U
h1 : ∀ (x : U), P x → ¬Q x
h2 : ∀ (x : U), Q x
⊢ ¬∃ x, P x
```
:::
:::

(In the tactic state, why doesn't Lean show the type of the variable `x` after the existential quantifier in the goal?  I don't know.  Sometimes you can leave out the type of a quantified variable and Lean is able to figure it out on its own.  But sometimes Lean is unable to figure out the type if it is not supplied, and you will get an error message if you leave it out.  To avoid confusion, we will always include the type of the quantified variable when we enter a quantified statement into Lean, but you will notice that Lean generally leaves out the type when it displays existentially quantified statements in the tactic state.)

To use the givens `h1` and `h2`, we will probably want to use universal instantiation.  But to do that we would need an object of type `U` to plug in for `x` in `h1` and `h2`, and there is no object of type `U` in the tactic state.  So at this point, we can't apply universal instantiation to `h1` and `h2`.  We should watch for an object of type `U` to come up in the course of the proof, and consider applying universal instantiation if one does.  Until then, we turn our attention to the goal.

The goal is a negative statement, so we begin by reexpressing it as an equivalent positive statement, using a quantifier negation law.  The tactic `quant_neg` applies a quantifier negation law to rewrite the goal.  As with the other tactics for applying logical equivalences, you can write `quant_neg at h` if you want to apply a quantifier negation law to a given `h`.  The effect of the tactic can be summarized as follows:

::: {style="margin: 0% 10%"}
| | `quant_neg` Tactic | |
|:--:|:--:|:--:|
| `¬∀ (x : U), P x` | is changed to | `∃ (x : U), ¬P x` |
| `¬∃ (x : U), P x` | is changed to | `∀ (x : U), ¬P x` |
| `∀ (x : U), P x` | is changed to | `¬∃ (x : U), ¬P x` |
| `∃ (x : U), P x` | is changed to | `¬∀ (x : U), ¬P x` |
:::

Using the `quant_neg` tactic leads to the following result.

::: {.inout}
::: {.inpt}
```lean
example (U : Type) (P Q : Pred U)
(h1 : ∀ (x : U), P x → ¬Q x)
(h2 : ∀ (x : U), Q x) :
¬∃ (x : U), P x := by
  quant_neg     --Goal is now ∀ (x : U), ¬P x
```
:::

::: {.outpt}
```state
U : Type
P Q : Pred U
h1 : ∀ (x : U), P x → ¬Q x
h2 : ∀ (x : U), Q x
⊢ ∀ (x : U), ¬P x
```
:::
:::

Now the goal starts with `∀`, so we use the strategy above and introduce an arbitrary object of type `U`.  Since the variable `x` occurs as a bound variable in several statements in this theorem, it might be best to use a different letter for the arbitrary object; this isn't absolutely necessary, but it may help to avoid confusion.  So our next tactic is `fix y : U`.

::: {.inout}
::: {.inpt}
```lean
example (U : Type) (P Q : Pred U)
(h1 : ∀ (x : U), P x → ¬Q x)
(h2 : ∀ (x : U), Q x) :
¬∃ (x : U), P x := by
  quant_neg     --Goal is now ∀ (x : U), ¬P x
  fix y : U
```
:::

::: {.outpt}
```state
U : Type
P Q : Pred U
h1 : ∀ (x : U), P x → ¬Q x
h2 : ∀ (x : U), Q x
y : U
⊢ ¬P y
```
:::
:::

Now we have an object of type `U` in the tactic state, namely, `y`.  So let's try applying universal instantiation to `h1` and `h2` and see if it helps.

::: {.inout}
::: {.inpt}
```lean
example (U : Type) (P Q : Pred U)
(h1 : ∀ (x : U), P x → ¬Q x)
(h2 : ∀ (x : U), Q x) :
¬∃ (x : U), P x := by
  quant_neg     --Goal is now ∀ (x : U), ¬P x
  fix y : U
  have h3 : P y → ¬Q y := h1 y
  have h4 : Q y := h2 y
```
:::

::: {.outpt}
```state
U : Type
P Q : Pred U
h1 : ∀ (x : U), P x → ¬Q x
h2 : ∀ (x : U), Q x
y : U
h3 : P y → ¬Q y
h4 : Q y
⊢ ¬P y
```
:::
:::

We're almost done, because the goal now follows easily from `h3` and `h4`.  If we use the contrapositive law to rewrite `h3` as `Q y → ¬P y`, then we can apply modus ponens to the rewritten `h3` and `h4` to reach the goal:

::: {.inout}
::: {.inpt}
```lean
example (U : Type) (P Q : Pred U)
(h1 : ∀ (x : U), P x → ¬Q x)
(h2 : ∀ (x : U), Q x) :
¬∃ (x : U), P x := by
  quant_neg     --Goal is now ∀ (x : U), ¬P x
  fix y : U
  have h3 : P y → ¬Q y := h1 y
  have h4 : Q y := h2 y
  contrapos at h3  --Now h3 : Q y → ¬P y
  show ¬P y from h3 h4
```
:::

::: {.outpt}
```state
!!Goals accomplished 🎉
```
:::
:::

Our next example is a theorem of set theory.  You already know how to type a few set theory symbols in Lean, but you'll need a few more for our next example.  Here's a summary of the most important set theory symbols and how to type them in Lean.

::: {style="margin: 0% 10%"}
| Symbol | How To Type It |
|:----:|:-------:|
| `∈` | `\in` |
| `∉` | `\notin` or `\inn` |
| `⊆` | `\sub` |
| `⊈` | `\subn` |
| `∪` | `\union` or `\cup` |
| `∩` | `\inter` or `\cap` |
| `\` | `\\` |
| `△` | `\bigtriangleup` |
| `𝒫` | `\powerset` |
:::

With this preparation, we can turn to our next example.

::: {.inout}
::: {.inpt}
```lean
example (U : Type) (A B C : Set U) (h1 : A ⊆ B ∪ C)
(h2 : ∀ (x : U), x ∈ A → x ∉ B) : A ⊆ C := by
```
:::

::: {.outpt}
```state
U : Type
A B C : Set U
h1 : A ⊆ B ∪ C
h2 : ∀ (x : U),
!!  x ∈ A → ¬x ∈ B
⊢ A ⊆ C
```
:::
:::

We begin by using the `define` tactic to write out the definition of the goal.

::: {.inout}
::: {.inpt}
```lean
example (U : Type) (A B C : Set U) (h1 : A ⊆ B ∪ C)
(h2 : ∀ (x : U), x ∈ A → x ∉ B) : A ⊆ C := by
  define  --Goal: ∀ {a : U}, a ∈ A → a ∈ C
```
:::

::: {.outpt}
```state
U : Type
A B C: Set U
h1 : A ⊆ B ∪ C
h2 : ∀ (x : U),
!!  x ∈ A → ¬x ∈ B
⊢ ∀ {a : U},
!!  a ∈ A → a ∈ C
```
:::
:::

Notice that Lean's definition of the goal starts with `∀ {a : U}`, not `∀ (a : U)`.  Why did Lean use curly braces rather than parentheses?  We'll return to that question shortly.  The difference doesn't affect our next steps, which are to introduce an arbitrary object `y` of type `U` and assume `y ∈ A`.

::: {.inout}
::: {.inpt}
```lean
example (U : Type) (A B C : Set U) (h1 : A ⊆ B ∪ C)
(h2 : ∀ (x : U), x ∈ A → x ∉ B) : A ⊆ C := by
  define  --Goal: ∀ {a : U}, a ∈ A → a ∈ C
  fix y : U
  assume h3 : y ∈ A
```
:::

::: {.outpt}
```state
U : Type
A B C : Set U
h1 : A ⊆ B ∪ C
h2 : ∀ (x : U),
!!  x ∈ A → ¬x ∈ B
y : U
h3 : y ∈ A
⊢ y ∈ C
```
:::
:::

Now we can combine `h2` and `h3` to conclude that `¬y ∈ B`.  Since we have `y : U`, by universal instantiation, `h2 y` is a proof of `y ∈ A → ¬y ∈ B`, and therefore by modus ponens, `h2 y h3` is a proof of `¬y ∈ B`.

::: {.inout}
::: {.inpt}
```lean
example (U : Type) (A B C : Set U) (h1 : A ⊆ B ∪ C)
(h2 : ∀ (x : U), x ∈ A → x ∉ B) : A ⊆ C := by
  define  --Goal: ∀ {a : U}, a ∈ A → a ∈ C
  fix y : U
  assume h3 : y ∈ A
  have h4 : y ∉ B := h2 y h3
```
:::

::: {.outpt}
```state
U : Type
A B C : Set U
h1 : A ⊆ B ∪ C
h2 : ∀ (x : U),
!!  x ∈ A → ¬x ∈ B
y : U
h3 : y ∈ A
h4 : ¬y ∈ B
⊢ y ∈ C
```
:::
:::

We should be able to use similar reasoning to combine `h1` and `h3`, if we first write out the definition of `h1`.

::: {.inout}
::: {.inpt}
```lean
example (U : Type) (A B C : Set U) (h1 : A ⊆ B ∪ C)
(h2 : ∀ (x : U), x ∈ A → x ∉ B) : A ⊆ C := by
  define  --Goal: ∀ {a : U}, a ∈ A → a ∈ C
  fix y : U
  assume h3 : y ∈ A
  have h4 : y ∉ B := h2 y h3
  define at h1  --h1 : ∀ {a : U}, a ∈ U → a ∈ B ∪ C
```
:::

::: {.outpt}
```state
U : Type
A B C : Set U
h1 : ∀ {a : U},
!!  a ∈ A → a ∈ B ∪ C
h2 : ∀ (x : U),
!!  x ∈ A → ¬x ∈ B
y : U
h3 : y ∈ A
h4 : ¬y ∈ B
⊢ y ∈ C
```
:::
:::

Once again, Lean has used curly braces to define `h1`, and now we are ready to explain what they mean.  If the definition had been `h1 : ∀ (a : U), a ∈ A → a ∈ B ∪ C`, then exactly as in the previous step, `h1 y h3` would be a proof of `y ∈ B ∪ C`.  The use of curly braces in the definition `h1 : ∀ {a : U}, a ∈ A → a ∈ B ∪ C` means that you don't need to tell Lean that `y` is being plugged in for `a` in the universal instantiation step; Lean will figure that out on its own.  Thus, you can just write `h1 h3` as a proof of `y ∈ B ∪ C`.  Indeed, if you write `h1 y h3` then you will get an error message, because Lean expects *not* to be told what to plug in for `a`.  You might think of the definition of `h1` as meaning `h1 : _ ∈ A → _ ∈ B ∪ C`, where the blanks can be filled in with anything of type `U` (with the same thing being put in both blanks).  When you ask Lean to apply modus ponens by combining this statement with `h3 : y ∈ A`, Lean figures out that in order for modus ponens to apply, the blanks must be filled in with `y`.

In this situation, the `a` in `h1` is called an *implicit argument*.  What this means is that, when `h1` is applied to make an inference in a proof, the value to be assigned to `a` is not specified explicitly; rather, the value is implicit.  We will see many more examples of implicit arguments later in this book.

::: {.inout}
::: {.inpt}
```lean
example (U : Type) (A B C : Set U) (h1 : A ⊆ B ∪ C)
(h2 : ∀ (x : U), x ∈ A → x ∉ B) : A ⊆ C := by
  define  --Goal: ∀ {a : U}, a ∈ A → a ∈ C
  fix y : U
  assume h3 : y ∈ A
  have h4 : y ∉ B := h2 y h3
  define at h1  --h1 : ∀ {a : U}, a ∈ U → a ∈ B ∪ C
  have h5 : y ∈ B ∪ C := h1 h3
```
:::

::: {.outpt}
```state
U : Type
A B C : Set U
h1 : ∀ {a : U},
!!  a ∈ A → a ∈ B ∪ C
h2 : ∀ (x : U),
!!  x ∈ A → ¬x ∈ B
y : U
h3 : y ∈ A
h4 : ¬y ∈ B
h5 : y ∈ B ∪ C
⊢ y ∈ C
```
:::
:::


If Lean was able to figure out that `y` should be plugged in for `a` in `h1` in this step, couldn't it have figured out that `y` should be plugged in for `x` in `h2` in the previous `have` step?  The answer is yes.  Of course, in `h2`, `x` was not an implicit argument, so Lean wouldn't *automatically* figure out what to plug in for `x`.  But we could have asked it to figure it out by writing the proof in the previous step as `h2 _ h3` rather than `h2 y h3`.  In a term-mode proof, an underscore represents a blank to be filled in by Lean.  Try changing the earlier step of the proof to `have h4 : y ∉ B := h2 _ h3` and you will see that Lean will accept it.  Of course, in this case this doesn't save us any typing, but in some situations it is useful to let Lean figure out some part of a proof.

Lean's ability to fill in blanks in term-mode proofs is limited.  For example, if you try changing the previous step to `have h4 : y ∉ B := h2 y _`, you'll get a red squiggle under the blank, and the error message in the Infoview pane will say `don't know how to synthesize placeholder`.  In other words, Lean was unable to figure out how to fill in the blank in this case.  In future proofs you might try replacing some expressions with blanks to get a feel for what Lean can and cannot figure out for itself.

Continuing with the proof, we see that we're almost done, because we can combine `h4` and `h5` to reach our goal.  To see how, we first write out the definition of `h5`.

::: {.inout}
::: {.inpt}
```lean
example (U : Type) (A B C : Set U) (h1 : A ⊆ B ∪ C)
(h2 : ∀ (x : U), x ∈ A → x ∉ B) : A ⊆ C := by
  define  --Goal: ∀ {a : U}, a ∈ A → a ∈ C
  fix y : U
  assume h3 : y ∈ A
  have h4 : y ∉ B := h2 y h3
  define at h1  --h1 : ∀ {a : U}, a ∈ U → a ∈ B ∪ C
  have h5 : y ∈ B ∪ C := h1 h3
  define at h5  --h5 : y ∈ B ∨ y ∈ C
```
:::

::: {.outpt}
```state
U : Type
A B C : Set U
h1 : ∀ {a : U},
!!  a ∈ A → a ∈ B ∪ C
h2 : ∀ (x : U),
!!  x ∈ A → ¬x ∈ B
y : U
h3 : y ∈ A
h4 : ¬y ∈ B
h5 : y ∈ B ∨ y ∈ C
⊢ y ∈ C
```
:::
:::

A conditional law will convert `h5` to `¬y ∈ B → y ∈ C`, and then modus ponens with `h4` will complete the proof.

::: {.inout}
::: {.inpt}
```lean
example (U : Type) (A B C : Set U) (h1 : A ⊆ B ∪ C)
(h2 : ∀ (x : U), x ∈ A → x ∉ B) : A ⊆ C := by
  define  --Goal: ∀ {a : U}, a ∈ A → a ∈ C
  fix y : U
  assume h3 : y ∈ A
  have h4 : y ∉ B := h2 y h3
  define at h1  --h1 : ∀ {a : U}, a ∈ U → a ∈ B ∪ C
  have h5 : y ∈ B ∪ C := h1 h3
  define at h5  --h5 : y ∈ B ∨ y ∈ C
  conditional at h5  --h5 : ¬y ∈ B → y ∈ C
  show y ∈ C from h5 h4
```
:::

::: {.outpt}
```state
!!Goals accomplished 🎉
```
:::
:::

Next we turn to strategies for working with existential quantifiers.

#### To prove a goal of the form `∃ (x : U), P x`:

::: {.ind}
Find a value of `x`, say `a`, for which you think `P a` is true, and prove `P a`.
:::

This strategy is based on the fact that if you have `a : U` and `h : P a`, then you can infer `∃ (x : U), P x`.  Indeed, in this situation the expression `Exists.intro a h` is a Lean term-mode proof of `∃ (x : U), P x`.  The name `Exists.intro` indicates that this is a rule for introducing an existential quantifier.

As suggested by the strategy above, we will often want to use this rule in situations in which our goal is `∃ (x : U), P x` and we have an object `a` of type `U` that we think makes `P a` true, but we don't yet have a proof of `P a`.  In that situation we can use the tactic `apply Exists.intro a _`.  Recall that the `apply` tactic asks Lean to figure out what to put in the blank to turn `Exists.intro a _` into a proof of the goal.  Lean will figure out that what needs to go in the blank is a proof of `P a`, so it sets `P a` to be the goal.  In other words, the tactic `apply Exists.intro a _` has the following effect on the tactic state:

::: {.lftrt}
::: {.bef}
```state
!! ⋮
a : U
⊢ ∃ (x : U), P x
```
:::

::: {.aft}
```state
!! ⋮
a : U
⊢ P a
```
:::
:::

Our strategy for using an existential given is a rule that is called *existential instantiation* in *HTPI*:

#### To use a given of the form `∃ (x : U), P x`:

::: {.ind}
Introduce a new variable, say `a`, into the proof to stand for an object of type `U` for which `P a` is true.
:::

Suppose that, in a Lean proof, you have `h : ∃ (x : U), P x`.  To apply the existential instantiation rule, you would use the tactic `obtain (a : U) (h' : P a) from h`.  This tactic introduces into the tactic state both a new variable `a` of type `U` and also the identifier `h'` for the new given `P a`.

Often, if your goal is an existential statement `∃ (x : U), P x`, you won't be able to use the strategy above for existential goals right away, because you won't know what object `a` to use in the tactic `apply Exists.intro a _`.  You may have to wait until a likely candidate for `a` pops up in the course of the proof.  On the other hand, it is usually best to use the `obtain` tactic right away if you have an existential given.  This is illustrated in our next example.

::: {.inout}
::: {.inpt}
```lean
example (U : Type) (P Q : Pred U)
(h1 : ∀ (x : U), ∃ (y : U), P x → ¬ Q y)
(h2 : ∃ (x : U), ∀ (y : U), P x → Q y) :
∃ (x : U), ¬P x := by
```
:::

::: {.outpt}
```state
U : Type
P Q : Pred U
h1 : ∀ (x : U), ∃ y,
!!  P x → ¬Q y
h2 : ∃ x, ∀ (y : U),
!!  P x → Q y
⊢ ∃ x, ¬P x
```
:::
:::

The goal is the existential statement `∃ (x : U), ¬P x`, and our strategy for existential goals says that we should try to find an object `a` of type `U` that we think would make the statement `¬P a` true.  But we don't have any objects of type `U` in the tactic state, so it looks like we can't use that strategy yet.  Similarly, we can't use the given `h1` yet, since we have nothing to plug in for `x` in `h1`.  However, `h2` is an existential given, and we can use it right away.

::: {.inout}
::: {.inpt}
```lean
example (U : Type) (P Q : Pred U)
(h1 : ∀ (x : U), ∃ (y : U), P x → ¬ Q y)
(h2 : ∃ (x : U), ∀ (y : U), P x → Q y) :
∃ (x : U), ¬P x := by
  obtain (a : U)
    (h3 : ∀ (y : U), P a → Q y) from h2
```
:::

::: {.outpt}
```state
U : Type
P Q : Pred U
h1 : ∀ (x : U), ∃ y,
!!  P x → ¬Q y
h2 : ∃ x, ∀ (y : U),
!!  P x → Q y
a : U
h3 : ∀ (y : U), P a → Q y
⊢ ∃ x, ¬P x
```
:::
:::

Now that we have `a : U`, we can apply universal instantiation to `h1`, plugging in `a` for `x`.

::: {.inout}
::: {.inpt}
```lean
example (U : Type) (P Q : Pred U)
(h1 : ∀ (x : U), ∃ (y : U), P x → ¬ Q y)
(h2 : ∃ (x : U), ∀ (y : U), P x → Q y) :
∃ (x : U), ¬P x := by
  obtain (a : U)
    (h3 : ∀ (y : U), P a → Q y) from h2
  have h4 : ∃ (y : U), P a → ¬ Q y := h1 a
```
:::

::: {.outpt}
```state
U : Type
P Q : Pred U
h1 : ∀ (x : U), ∃ y,
!!  P x → ¬Q y
h2 : ∃ x, ∀ (y : U),
!!  P x → Q y
a : U
h3 : ∀ (y : U), P a → Q y
h4 : ∃ y, P a → ¬Q y
⊢ ∃ x, ¬P x
```
:::
:::

By the way, this is another case in which Lean could have figured out a part of the proof on its own.  Try changing `h1 a` in the last step to `h1 _`, and you'll see that Lean will be able to figure out how to fill in the blank.

Our new given `h4` is another existential statement, so again we use it right away to introduce another object of type `U`.  Since this object might not be the same as `a`, we must give it a different name.  (Indeed, if you try to use the name `a` again, Lean will give you an error message.)

::: {.inout}
::: {.inpt}
```lean
example (U : Type) (P Q : Pred U)
(h1 : ∀ (x : U), ∃ (y : U), P x → ¬ Q y)
(h2 : ∃ (x : U), ∀ (y : U), P x → Q y) :
∃ (x : U), ¬P x := by
  obtain (a : U)
    (h3 : ∀ (y : U), P a → Q y) from h2
  have h4 : ∃ (y : U), P a → ¬ Q y := h1 a
  obtain (b : U) (h5 : P a → ¬ Q b) from h4
```
:::

::: {.outpt}
```state
U : Type
P Q : Pred U
h1 : ∀ (x : U), ∃ y,
!!  P x → ¬Q y
h2 : ∃ x, ∀ (y : U),
!!  P x → Q y
a : U
h3 : ∀ (y : U), P a → Q y
h4 : ∃ y, P a → ¬Q y
b : U
h5 : P a → ¬Q b
⊢ ∃ x, ¬P x
```
:::
:::

We have not yet used `h3`.  We could plug in either `a` or `b` for `y` in `h3`, but a little thought should show you that plugging in `b` is more useful.

::: {.inout}
::: {.inpt}
```lean
example (U : Type) (P Q : Pred U)
(h1 : ∀ (x : U), ∃ (y : U), P x → ¬ Q y)
(h2 : ∃ (x : U), ∀ (y : U), P x → Q y) :
∃ (x : U), ¬P x := by
  obtain (a : U)
    (h3 : ∀ (y : U), P a → Q y) from h2
  have h4 : ∃ (y : U), P a → ¬ Q y := h1 a
  obtain (b : U) (h5 : P a → ¬ Q b) from h4
  have h6 : P a → Q b := h3 b
```
:::

::: {.outpt}
```state
U : Type
P Q : Pred U
h1 : ∀ (x : U), ∃ y,
!!  P x → ¬Q y
h2 : ∃ x, ∀ (y : U),
!!  P x → Q y
a : U
h3 : ∀ (y : U), P a → Q y
h4 : ∃ y, P a → ¬Q y
b : U
h5 : P a → ¬Q b
h6 : P a → Q b
⊢ ∃ x, ¬P x
```
:::
:::

Now look at `h5` and `h6`.  They show that `P a` leads to contradictory conclusions, `¬Q b` and `Q b`.  This means that `P a` must be false.  We finally know what value of `x` to use to prove the goal.

::: {.inout}
::: {.inpt}
```lean
example (U : Type) (P Q : Pred U)
(h1 : ∀ (x : U), ∃ (y : U), P x → ¬ Q y)
(h2 : ∃ (x : U), ∀ (y : U), P x → Q y) :
∃ (x : U), ¬P x := by
  obtain (a : U)
    (h3 : ∀ (y : U), P a → Q y) from h2
  have h4 : ∃ (y : U), P a → ¬ Q y := h1 a
  obtain (b : U) (h5 : P a → ¬ Q b) from h4
  have h6 : P a → Q b := h3 b
  apply Exists.intro a _
```
:::

::: {.outpt}
```state
U : Type
P Q : Pred U
h1 : ∀ (x : U), ∃ y,
!!  P x → ¬Q y
h2 : ∃ x, ∀ (y : U),
!!  P x → Q y
a : U
h3 : ∀ (y : U), P a → Q y
h4 : ∃ y, P a → ¬Q y
b : U
h5 : P a → ¬Q b
h6 : P a → Q b
⊢ ¬P a
```
:::
:::

Since the goal is now a negative statement that cannot be reexpressed as a positive statement, we use proof by contradiction.

::: {.inout}
::: {.inpt}
```lean
example (U : Type) (P Q : Pred U)
(h1 : ∀ (x : U), ∃ (y : U), P x → ¬ Q y)
(h2 : ∃ (x : U), ∀ (y : U), P x → Q y) :
∃ (x : U), ¬P x := by
  obtain (a : U)
    (h3 : ∀ (y : U), P a → Q y) from h2
  have h4 : ∃ (y : U), P a → ¬ Q y := h1 a
  obtain (b : U) (h5 : P a → ¬ Q b) from h4
  have h6 : P a → Q b := h3 b
  apply Exists.intro a _
  by_contra h7
```
:::

::: {.outpt}
```state
U : Type
P Q : Pred U
h1 : ∀ (x : U), ∃ y,
!!  P x → ¬Q y
h2 : ∃ x, ∀ (y : U),
!!  P x → Q y
a : U
h3 : ∀ (y : U), P a → Q y
h4 : ∃ y, P a → ¬Q y
b : U
h5 : P a → ¬Q b
h6 : P a → Q b
h7 : P a
⊢ False
```
:::
:::

Now `h5 h7` is a proof of `¬Q b` and `h6 h7` is a proof of `Q b`, so `h5 h7 (h6 h7)` is a proof of `False`.

::: {.inout}
::: {.inpt}
```lean
example (U : Type) (P Q : Pred U)
(h1 : ∀ (x : U), ∃ (y : U), P x → ¬ Q y)
(h2 : ∃ (x : U), ∀ (y : U), P x → Q y) :
∃ (x : U), ¬P x := by
  obtain (a : U)
    (h3 : ∀ (y : U), P a → Q y) from h2
  have h4 : ∃ (y : U), P a → ¬ Q y := h1 a
  obtain (b : U) (h5 : P a → ¬ Q b) from h4
  have h6 : P a → Q b := h3 b
  apply Exists.intro a _
  by_contra h7
  show False from h5 h7 (h6 h7)
```
:::

::: {.outpt}
```state
!!Goals accomplished 🎉
```
:::
:::

We conclude this section with the theorem from Example 3.3.5 in *HTPI*.  That theorem concerns a union of a family of sets.  In *HTPI*, such a union is written using a large union symbol, $\bigcup$.  Lean uses the symbol `∪₀`, which is entered by typing `\U0` (that is, backslash--capital U--zero).  For an intersection of a family of sets, Lean uses `∩₀`, typed as `\I0`.

::: {.inout}
::: {.inpt}
```lean
theorem Example_3_3_5 (U : Type) (B : Set U)
(F : Set (Set U)) : ⋃₀F ⊆ B → F ⊆ 𝒫 B := by
```
:::

::: {.outpt}
```state
U : Type
B : Set U
F : Set (Set U)
⊢ ⋃₀F ⊆ B → F ⊆ 𝒫 B
```
:::
:::

Note that `F` has type `Set (Set U)`, which means that it is a set whose elements are sets of objects of type `U`.  Since the goal is a conditional statement, we assume the antecedent and set the consequent as our goal.  We'll also write out the definition of the new goal.

::: {.inout}
::: {.inpt}
```lean
theorem Example_3_3_5 (U : Type) (B : Set U)
(F : Set (Set U)) : ⋃₀F ⊆ B → F ⊆ 𝒫 B := by
  assume h1 : ∪₀F ⊆ B
  define
```
:::

::: {.outpt}
```state
U : Type
B : Set U
F : Set (Set U)
h1 : ⋃₀F ⊆ B
⊢ ∀ {a : Set U},
!!  a ∈ F → a ∈ 𝒫 B
```
:::
:::

Based on the form of the goal, we introduce an arbitrary object `x` of type `Set U` and assume `x ∈ F`.  The new goal will be `x ∈ 𝒫 B`.  The `define` tactic works out that this means `x ⊆ B`, which can be further expanded to `∀ {a : U}, a ∈ x → a ∈ B`.

::: {.inout}
::: {.inpt}
```lean
theorem Example_3_3_5 (U : Type) (B : Set U)
(F : Set (Set U)) : ⋃₀F ⊆ B → F ⊆ 𝒫 B := by
  assume h1 : ∪₀F ⊆ B
  define
  fix x : Set U
  assume h2 : x ∈ F
  define
```
:::

::: {.outpt}
```state
U : Type
B : Set U
F : Set (Set U)
h1 : ⋃₀F ⊆ B
x : Set U
h2 : x ∈ F
⊢ ∀ {a : U},
!!  a ∈ x → a ∈ B
```
:::
:::

Once again the form of the goal dictates our next steps: introduce an arbitrary `y` of type `U` and assume `y ∈ x`.

::: {.inout}
::: {.inpt}
```lean
theorem Example_3_3_5 (U : Type) (B : Set U)
(F : Set (Set U)) : ⋃₀F ⊆ B → F ⊆ 𝒫 B := by
  assume h1 : ∪₀F ⊆ B
  define
  fix x : Set U
  assume h2 : x ∈ F
  define
  fix y : U
  assume h3 : y ∈ x
```
:::

::: {.outpt}
```state
U : Type
B : Set U
F : Set (Set U)
h1 : ⋃₀F ⊆ B
x : Set U
h2 : x ∈ F
y : U
h3 : y ∈ x
⊢ y ∈ B
```
:::
:::

The goal can be analyzed no further, so we turn to the givens.  We haven't used `h1` yet.  To see how to use it, we write out its definition.

::: {.inout}
::: {.inpt}
```lean
theorem Example_3_3_5 (U : Type) (B : Set U)
(F : Set (Set U)) : ⋃₀F ⊆ B → F ⊆ 𝒫 B := by
  assume h1 : ∪₀F ⊆ B
  define
  fix x : Set U
  assume h2 : x ∈ F
  define
  fix y : U
  assume h3 : y ∈ x
  define at h1
```
:::

::: {.outpt}
```state
U : Type
B : Set U
F : Set (Set U)
h1 : ∀ {a : U},
!!  a ∈ ⋃₀F → a ∈ B
x : Set U
h2 : x ∈ F
y : U
h3 : y ∈ x
⊢ y ∈ B
```
:::
:::

Now we see that we can try to use `h1` to reach our goal.  Indeed, `h1 _` would be a proof of the goal if we could fill in the blank with a proof of `y ∈ ∪₀F`.  So we use the `apply h1 _` tactic.

::: {.inout}
::: {.inpt}
```lean
theorem Example_3_3_5 (U : Type) (B : Set U)
(F : Set (Set U)) : ⋃₀F ⊆ B → F ⊆ 𝒫 B := by
  assume h1 : ∪₀F ⊆ B
  define
  fix x : Set U
  assume h2 : x ∈ F
  define
  fix y : U
  assume h3 : y ∈ x
  define at h1
  apply h1 _
```
:::

::: {.outpt}
```state
U : Type
B : Set U
F : Set (Set U)
h1 : ∀ {a : U},
!!  a ∈ ⋃₀F → a ∈ B
x : Set U
h2 : x ∈ F
y : U
h3 : y ∈ x
⊢ y ∈ ⋃₀F
```
:::
:::

Once again we have a goal that can be analyzed by using the `define` tactic.

::: {.inout}
::: {.inpt}
```lean
theorem Example_3_3_5 (U : Type) (B : Set U)
(F : Set (Set U)) : ⋃₀F ⊆ B → F ⊆ 𝒫 B := by
  assume h1 : ∪₀F ⊆ B
  define
  fix x : Set U
  assume h2 : x ∈ F
  define
  fix y : U
  assume h3 : y ∈ x
  define at h1
  apply h1 _
  define
```
:::

::: {.outpt}
```state
U : Type
B : Set U
F : Set (Set U)
h1 : ∀ {a : U},
!!  a ∈ ⋃₀F → a ∈ B
x : Set U
h2 : x ∈ F
y : U
h3 : y ∈ x
⊢ ∃ a, a ∈ F ∧ y ∈ a
```
:::
:::

Our goal is now an existential statement, so we look for a value of `a` that will make the statement `a ∈ F ∧ y ∈ a` true.  The givens `h2` and `h3` tell us that `x` is such a value, so as described earlier our next tactic should be `apply Exists.intro x _`.

::: {.inout}
::: {.inpt}
```lean
theorem Example_3_3_5 (U : Type) (B : Set U)
(F : Set (Set U)) : ⋃₀F ⊆ B → F ⊆ 𝒫 B := by
  assume h1 : ∪₀F ⊆ B
  define
  fix x : Set U
  assume h2 : x ∈ F
  define
  fix y : U
  assume h3 : y ∈ x
  define at h1
  apply h1 _
  define
  apply Exists.intro x _
```
:::

::: {.outpt}
```state
U : Type
B : Set U
F : Set (Set U)
h1 : ∀ {a : U},
!!  a ∈ ⋃₀F → a ∈ B
x : Set U
h2 : x ∈ F
y : U
h3 : y ∈ x
⊢ x ∈ F ∧ y ∈ x
```
:::
:::

Clearly the goal now follows from `h2` and `h3`, but how do we write the proof in Lean?  Since we need to introduce the "and" symbol `∧`, you shouldn't be surprised to learn that the rule we need is called `And.intro`.  Proof strategies for statements involving "and" will be the subject of the next section.

::: {.inout}
::: {.inpt}
```lean
theorem Example_3_3_5 (U : Type) (B : Set U)
(F : Set (Set U)) : ⋃₀F ⊆ B → F ⊆ 𝒫 B := by
  assume h1 : ∪₀F ⊆ B
  define
  fix x : Set U
  assume h2 : x ∈ F
  define
  fix y : U
  assume h3 : y ∈ x
  define at h1
  apply h1 _
  define
  apply Exists.intro x _
  show x ∈ F ∧ y ∈ x from And.intro h2 h3
```
:::

::: {.outpt}
```state
!!Goals accomplished 🎉
```
:::
:::

You might want to compare the Lean proof above to the way the proof was written in *HTPI*.  Here are the theorem and proof from *HTPI*:

::: {.thm}
Suppose $B$ is a set and $\mathcal{F}$ is a family of sets.  If $\bigcup\mathcal{F} \subseteq B$ then $\mathcal{F} \subseteq \mathscr{P}(B)$.
:::
::: {.proof}
Suppose $\bigcup \mathcal{F} \subseteq B$.  Let $x$ be an arbitrary element of $\mathcal{F}$.  Let $y$ be an arbitrary element of $x$.  Since $y \in x$ and $x \in \mathcal{F}$, by the definition of $\bigcup \mathcal{F}$, $y \in \bigcup \mathcal{F}$.  But then since $\bigcup \mathcal{F} \subseteq B$, $y \in B$.  Since $y$ was an arbitrary element of $x$, we can conclude that $x \subseteq B$, so $x \in \mathscr{P}(B)$.  But $x$ was an arbitrary element of $\mathcal{F}$, so this shows that $\mathcal{F} \subseteq \mathscr{P}(B)$, as required.\qedhere
:::

## 3.4. Proofs Involving Conjunctions and Biconditionals

The strategies in *HTPI* for working with conjunctions are very simple.

#### To prove a goal of the form `P ∧ Q`:

::: {.ind}
Prove `P` and `Q` separately.
:::

We already saw an example, at the end of the last section, of the use of the rule `And.intro` to prove a conjunction.  In general, if you have `h1 : P` and `h2 : Q`, then `And.intro h1 h2` is a proof of `P ∧ Q`.  It follows that if your goal is `P ∧ Q` but you don't yet have proofs of `P` and `Q`, then you can use the tactic `apply And.intro _ _`.  Lean will figure out that the blanks need to be filled in with proofs of `P` and `Q`, so it will ask you to prove `P` and `Q` separately, as suggested by the strategy above.

If you already have a proof of either `P` or `Q`, then you can fill in one of the blanks in the `apply` tactic.  For example, if you have `h : P`, then you can write `apply And.intro h _`, and Lean will tell you that you just have to prove `Q` to complete the proof.  Similarly, if you have `h : Q`, then `apply And.intro _ h` will lead to just the single goal `P`.  There is also a shortcut you can use with the `apply` tactic: any blanks that come at the end of the tactic can be left out.  So instead of `apply And.intro _ _`, you can just write `apply And.intro`, and instead of `apply And.intro h _`, you can write `apply And.intro h`.  On the other hand, `apply And.intro _ h` can't be shortened; it is only blanks *at the end* that can be left out.

The strategy for a given that is a conjunction is similar.

#### To use a given of the form `P ∧ Q`:

::: {.ind}
Treat this as two separate givens: `P`, and `Q`.
:::

If you have a given `h : P ∧ Q`, then Lean will recognize `h.left` as a proof of `P`, and `h.right` as a proof of `Q`.

Here's an example that illustrates these strategies.  It is similar to Example 3.4.1 in *HTPI*

::: {.inout}
::: {.inpt}
```lean
theorem Like_Example_3_4_1 (U : Type)
(A B C D : Set U) (h1 : A ⊆ B)
(h2 : ¬∃ (c : U), c ∈ C ∩ D) : A ∩ C ⊆ B \ D := by
```
:::

::: {.outpt}
```state
U : Type
A B C D : Set U
h1 : A ⊆ B
h2 : ¬∃ c, c ∈ C ∩ D
⊢ A ∩ C ⊆ B \ D
```
:::
:::

The `define` tactic will rewrite the goal as `∀ {a : U}, a ∈ A ∩ C → a ∈ B \ D`, and then we can introduce an arbitrary `x : U` and assume `x ∈ A ∩ C`.  

::: {.inout}
::: {.inpt}
```lean
theorem Like_Example_3_4_1 (U : Type)
(A B C D : Set U) (h1 : A ⊆ B)
(h2 : ¬∃ (c : U), c ∈ C ∩ D) : A ∩ C ⊆ B \ D := by
  define
  fix x : U
  assume h3 : x ∈ A ∩ C
```
:::

::: {.outpt}
```state
U : Type
A B C D : Set U
h1 : A ⊆ B
h2 : ¬∃ c, c ∈ C ∩ D
x : U
h3 : x ∈ A ∩ C
⊢ x ∈ B \ D
```
:::
:::

Now let's take a look at the definitions of `h3` and the goal:

::: {.inout}
::: {.inpt}
```lean
theorem Like_Example_3_4_1 (U : Type)
(A B C D : Set U) (h1 : A ⊆ B)
(h2 : ¬∃ (c : U), c ∈ C ∩ D) : A ∩ C ⊆ B \ D := by
  define
  fix x : U
  assume h3 : x ∈ A ∩ C
  define at h3; define
```
:::

::: {.outpt}
```state
U : Type
A B C D : Set U
h1 : A ⊆ B
h2 : ¬∃ c, c ∈ C ∩ D
x : U
h3 : x ∈ A ∧ x ∈ C
⊢ x ∈ B ∧ ¬x ∈ D
```
:::
:::

Since the goal is now a conjuction, we use the strategy above by using the tactic `apply And.intro`.

::: {.inout}
::: {.inpt}
```lean
theorem Like_Example_3_4_1 (U : Type)
(A B C D : Set U) (h1 : A ⊆ B)
(h2 : ¬∃ (c : U), c ∈ C ∩ D) : A ∩ C ⊆ B \ D := by
  define
  fix x : U
  assume h3 : x ∈ A ∩ C
  define at h3; define
  apply And.intro
```
:::

::: {.outpt}
```state
case left
U : Type
A B C D : Set U
h1 : A ⊆ B
h2 : ¬∃ c, c ∈ C ∩ D
x : U
h3 : x ∈ A ∧ x ∈ C
⊢ x ∈ B
case right
U : Type
A B C D : Set U
h1 : A ⊆ B
h2 : ¬∃ c, c ∈ C ∩ D
x : U
h3 : x ∈ A ∧ x ∈ C
⊢ ¬x ∈ D
```
:::
:::

Look carefully at the tactic state.  Lean has listed *two* goals, one after the other, and it has helpfully labeled them "case left" and "case right," indicating that the first goal is proving the left side of the conjunction and the second is proving the right.  The given information in both cases is the same, but in the first case the goal is `x ∈ B`, and in the second it is `¬x ∈ D`.  As we continue with the proof, Lean will interpret our tactics as applying to the first goal, until we achieve that goal.  Once we achieve it, Lean will move on to the second goal.  To make the proof more readable, we will add comments indicating which steps give the proof of the first goal and which prove the second.  (If, for some reason, you prefer to prove the second goal first, the tactic `swap` will switch the order of the two goals.)

The first goal is easy:  We have `h1 : A ⊆ B` and, as explained above, `h3.left : x ∈ A`.  As we have seen in several previous examples, the tactic `define at h1` will rewrite `h1` as `∀ {a : U}, a ∈ A → a ∈ B`, and then `h1 h3.left` will be a proof of `x ∈ B`.  And now we'll let you in on a little secret: the `define` tactic isn't really necessary.  *You* may find the `define` tactic to be useful in many situations, because it helps you see what a statement means.  But *Lean* doesn't need to be told to work out what the statement means; it will do that automatically.  So we can skip the define tactic and just give `h1 h3.left` as a proof of `x ∈ B`.  In general, if you have `h1 : A ⊆ B` and `h2 : x ∈ A`, then Lean will recognize `h1 h2` as a proof of `x ∈ B`.

::: {.inout}
::: {.inpt}
```lean
theorem Like_Example_3_4_1 (U : Type)
(A B C D : Set U) (h1 : A ⊆ B)
(h2 : ¬∃ (c : U), c ∈ C ∩ D) : A ∩ C ⊆ B \ D := by
  define
  fix x : U
  assume h3 : x ∈ A ∩ C
  define at h3; define
  apply And.intro
  -- Proof that x ∈ B:
  show x ∈ B from h1 h3.left
```
:::

::: {.outpt}
```state
case right
U : Type
A B C D : Set U
h1 : A ⊆ B
h2 : ¬∃ c, c ∈ C ∩ D
x : U
h3 : x ∈ A ∧ x ∈ C
⊢ ¬x ∈ D
```
:::
:::

Note that Lean has recognized that the first goal has been achieved, so it has moved on to the second goal.  This goal is a negative statement, and the given `h2` is also a negative statement.  This suggests using proof by contradiction, and achieving the contradiction by contradicting `h2`.

::: {.inout}
::: {.inpt}
```lean
theorem Like_Example_3_4_1 (U : Type)
(A B C D : Set U) (h1 : A ⊆ B)
(h2 : ¬∃ (c : U), c ∈ C ∩ D) : A ∩ C ⊆ B \ D := by
  define
  fix x : U
  assume h3 : x ∈ A ∩ C
  define at h3; define
  apply And.intro
  -- Proof that x ∈ B:
  show x ∈ B from h1 h3.left
  -- Proof that ¬x ∈ C:
  contradict h2 with h4
```
:::

::: {.outpt}
```state
case right
U : Type
A B C D : Set U
h1 : A ⊆ B
h2 : ¬∃ c, c ∈ C ∩ D
x : U
h3 : x ∈ A ∧ x ∈ C
h4 : x ∈ D
⊢ ∃ c, c ∈ C ∩ D
```
:::
:::

The goal is now an existential statement, and looking at `h3` and `h4` it is clear that the right value to plug in for `c` in the goal is `x`.  The tactic `apply Exists.intro x` will change the goal to `x ∈ C ∩ D` (we have again left off the unnecessary blank at the end of the `apply` tactic).

::: {.inout}
::: {.inpt}
```lean
theorem Like_Example_3_4_1 (U : Type)
(A B C D : Set U) (h1 : A ⊆ B)
(h2 : ¬∃ (c : U), c ∈ C ∩ D) : A ∩ C ⊆ B \ D := by
  define
  fix x : U
  assume h3 : x ∈ A ∩ C
  define at h3; define
  apply And.intro
  -- Proof that x ∈ B:
  show x ∈ B from h1 h3.left
  -- Proof that ¬x ∈ C:
  contradict h2 with h4
  apply Exists.intro x
```
:::

::: {.outpt}
```state
case right
U : Type
A B C D : Set U
h1 : A ⊆ B
h2 : ¬∃ c, c ∈ C ∩ D
x : U
h3 : x ∈ A ∧ x ∈ C
h4 : x ∈ D
⊢ x ∈ C ∩ D
```
:::
:::

The `define` tactic would now rewrite the goal as `x ∈ C ∧ x ∈ D`, and we could prove this goal by combining `h3.right` and `h4`, using the `And.intro` rule.  But since we know what the result of the `define` tactic will be, there is really no need to use it.  We can just use `And.intro` right away to complete the proof.

::: {.inout}
::: {.inpt}
```lean
theorem Like_Example_3_4_1 (U : Type)
(A B C D : Set U) (h1 : A ⊆ B)
(h2 : ¬∃ (c : U), c ∈ C ∩ D) : A ∩ C ⊆ B \ D := by
  define
  fix x : U
  assume h3 : x ∈ A ∩ C
  define at h3; define
  apply And.intro
  -- Proof that x ∈ B:
  show x ∈ B from h1 h3.left
  -- Proof that ¬x ∈ C:
  contradict h2 with h4
  apply Exists.intro x
  show x ∈ C ∩ D from And.intro h3.right h4
```
:::

::: {.outpt}
```state
!!Goals accomplished 🎉
```
:::
:::

Since `P ↔ Q` is shorthand for `(P → Q) ∧ (Q → P)`, the strategies given above for conjunctions lead immediately to the following strategies for biconditionals:

#### To prove a goal of the form `P ↔ Q`:

::: {.ind}
Prove `P → Q` and `Q → P` separately.
:::

#### To use a given of the form `P ↔ Q`:

::: {.ind}
Treat this as two separate givens: `P → Q`, and `Q → P`.
:::

The methods for using these strategies in Lean are similar to those we used above for conjunctions.  If we have `h1 : P → Q` and `h2 : Q → P`, then `Iff.intro h1 h2` is a proof of `P ↔ Q`.  Thus, if the goal is `P ↔ Q`, then the tactic `apply Iff.intro _ _` will convert this into two separate goals, `P → Q` and `Q → P`.  Once again, you can fill in one of these blanks if you already have a proof of either `P → Q` or `Q → P`, and you can leave out any blanks at the end of the tactic.  If you have a given `h : P ↔ Q`, then `h.ltr` is a proof of the left-to-right direction of the biconditional, `P → Q`, and `h.rtl` is a proof of the right-to-left direction, `Q → P`.

Let's try these strategies out in an example.

::: {.inout}
::: {.inpt}
```lean
example (U : Type) (P Q : Pred U)
(h1 : ∀ (x : U), P x ↔ Q x) :
(∃ (x : U), P x) ↔ ∃ (x : U), Q x := by
```
:::

::: {.outpt}
```state
U : Type
P Q : Pred U
h1 : ∀ (x : U), P x ↔ Q x
⊢ (∃ x, P x) ↔ ∃ x, Q x
```
:::
:::

The goal is a biconditional statement, so we begin with the tactic `apply Iff.intro`.

::: {.inout}
::: {.inpt}
```lean
example (U : Type) (P Q : Pred U)
(h1 : ∀ (x : U), P x ↔ Q x) :
(∃ (x : U), P x) ↔ ∃ (x : U), Q x := by
  apply Iff.intro
```
:::

::: {.outpt}
```state
case mp
U : Type
P Q : Pred U
h1 : ∀ (x : U), P x ↔ Q x
⊢ (∃ x, P x) → ∃ x, Q x
case mpr
U : Type
P Q : Pred U
h1 : ∀ (x : U), P x ↔ Q x
⊢ (∃ x, Q x) → ∃ x, P x
```
:::
:::

Once again, we have two goals.  (The case labels this time aren't very intuitive; "mp" stands for "modus ponens" and "mpr" stands for "modus ponens reverse".)  As in *HTPI*, we'll label the proofs of the two goals with `(→)` and `(←)`, representing the two directions of the biconditional symbol `↔`.  (You can type `←` in VS Code by typing `\l`, short for "left".)  The first goal is a conditional statement, so we assume the antecedent.  In the displays below, we'll just show the tactic state for the first goal, since that's all that's relevant for figuring out our next steps.

::: {.inout}
::: {.inpt}
```lean
example (U : Type) (P Q : Pred U)
(h1 : ∀ (x : U), P x ↔ Q x) :
(∃ (x : U), P x) ↔ ∃ (x : U), Q x := by
  apply Iff.intro
  -- (→)
  assume h2 : ∃ (x : U), P x
```
:::

::: {.outpt}
```state
case mp
U : Type
P Q : Pred U
h1 : ∀ (x : U), P x ↔ Q x
h2 : ∃ x, P x
⊢ ∃ x, Q x
```
:::
:::

As usual, when we have an existential given, we use it right away.

::: {.inout}
::: {.inpt}
```lean
example (U : Type) (P Q : Pred U)
(h1 : ∀ (x : U), P x ↔ Q x) :
(∃ (x : U), P x) ↔ ∃ (x : U), Q x := by
  apply Iff.intro
  -- (→)
  assume h2 : ∃ (x : U), P x
  obtain (u : U) (h3 : P u) from h2
```
:::

::: {.outpt}
```state
case mp
U : Type
P Q : Pred U
h1 : ∀ (x : U), P x ↔ Q x
h2 : ∃ x, P x
u : U
h3 : P u
⊢ ∃ x, Q x
```
:::
:::

Now that we have an object of type `U` in the tactic state, we can use `h1` by applying universal instantiation.

::: {.inout}
::: {.inpt}
```lean
example (U : Type) (P Q : Pred U)
(h1 : ∀ (x : U), P x ↔ Q x) :
(∃ (x : U), P x) ↔ ∃ (x : U), Q x := by
  apply Iff.intro
  -- (→)
  assume h2 : ∃ (x : U), P x
  obtain (u : U) (h3 : P u) from h2
  have h4 : P u ↔ Q u := h1 u
```
:::

::: {.outpt}
```state
case mp
U : Type
P Q : Pred U
h1 : ∀ (x : U), P x ↔ Q x
h2 : ∃ x, P x
u : U
h3 : P u
h4 : P u ↔ Q u
⊢ ∃ x, Q x
```
:::
:::

Looking at `h3` and `h4`, we can now see that we will be able to complete the proof if we assign the value `u` to `x` in the goal.  So our next step is the tactic `apply Exists.intro u`.

::: {.inout}
::: {.inpt}
```lean
example (U : Type) (P Q : Pred U)
(h1 : ∀ (x : U), P x ↔ Q x) :
(∃ (x : U), P x) ↔ ∃ (x : U), Q x := by
  apply Iff.intro
  -- (→)
  assume h2 : ∃ (x : U), P x
  obtain (u : U) (h3 : P u) from h2
  have h4 : P u ↔ Q u := h1 u
  apply Exists.intro u
```
:::

::: {.outpt}
```state
case mp
U : Type
P Q : Pred U
h1 : ∀ (x : U), P x ↔ Q x
h2 : ∃ x, P x
u : U
h3 : P u
h4 : P u ↔ Q u
⊢ Q u
```
:::
:::

To complete the proof, we use the left-to-right direction of `h4`.  We have `h4.ltr : P u → Q u` and `h3 : P u`, so by modus ponens, `h4.ltr h3` proves the goal `Q u`.

::: {.inout}
::: {.inpt}
```lean
example (U : Type) (P Q : Pred U)
(h1 : ∀ (x : U), P x ↔ Q x) :
(∃ (x : U), P x) ↔ ∃ (x : U), Q x := by
  apply Iff.intro
  -- (→)
  assume h2 : ∃ (x : U), P x
  obtain (u : U) (h3 : P u) from h2
  have h4 : P u ↔ Q u := h1 u
  apply Exists.intro u
  show Q u from h4.ltr h3
```
:::

::: {.outpt}
```state
case mpr
U : Type
P Q : Pred U
h1 : ∀ (x : U), P x ↔ Q x
⊢ (∃ x, Q x) → ∃ x, P x
```
:::
:::

This completes the `(→)` half of the proof; the tactic state now lists only the goal for the `(←)` half.  The second half of the proof is similar to the first.  We begin by assuming `h2 : ∃ (x : U), Q x`, and then we use that assumption to obtain `u : U` and `h3 : Q u`.

::: {.inout}
::: {.inpt}
```lean
example (U : Type) (P Q : Pred U)
(h1 : ∀ (x : U), P x ↔ Q x) :
(∃ (x : U), P x) ↔ ∃ (x : U), Q x := by
  apply Iff.intro
  -- (→)
  assume h2 : ∃ (x : U), P x
  obtain (u : U) (h3 : P u) from h2
  have h4 : P u ↔ Q u := h1 u
  apply Exists.intro u
  show Q u from h4.ltr h3
  -- (←)
  assume h2 : ∃ (x : U), Q x
  obtain (u : U) (h3 : Q u) from h2
```
:::

::: {.outpt}
```state
case mpr
U : Type
P Q : Pred U
h1 : ∀ (x : U), P x ↔ Q x
h2 : ∃ x, Q x
u : U
h3 : Q u
⊢ ∃ x, P x
```
:::
:::

We can actually shorten the proof by packing a lot into a single step.  See if you can figure out the last line of the completed proof below; we'll give an explanation after the proof.

```lean
example (U : Type) (P Q : Pred U)
(h1 : ∀ (x : U), P x ↔ Q x) :
(∃ (x : U), P x) ↔ ∃ (x : U), Q x := by
  apply Iff.intro
  -- (→)
  assume h2 : ∃ (x : U), P x
  obtain (u : U) (h3 : P u) from h2
  have h4 : P u ↔ Q u := h1 u
  apply Exists.intro u
  show Q u from h4.ltr h3
  -- (←)
  assume h2 : ∃ (x : U), Q x
  obtain (u : U) (h3 : Q u) from h2
  show ∃ (x : U), P x from Exists.intro u ((h1 u).rtl h3)
```

To understand the last step, start with the fact that `h1 u` is a proof of `P u ↔ Q u`.  Therefore `(h1 u).rtl` is a proof of `Q u → P u`, so by modus ponens, `(h1 u).rtl h3` is a proof of `P u`.  It follows that `Exists.intro u ((h1 u).rtl h3)` is a proof of `∃ (x : U), P x`, which was the goal.

There is one more style of reasoning that is sometimes used in proofs of biconditional statements.  It is illustrated in Example 3.4.5 of *HTPI*.  Here is that theorem, as it is presented in *HTPI*.

::: {.thm}
Suppose $A$, $B$, and $C$ are sets.  Then $A \cap (B \setmin C) = (A \cap B) \setmin C$.
:::
::: {.proof}
Let $x$ be arbitrary.  Then
\begin{align*}
x \in A \cap (B \setmin C) &\text{ iff } x \in A \wedge x \in B \setmin C\\
&\text{ iff } x \in A \wedge x \in B \wedge x \notin C\\
&\text{ iff } x \in (A \cap B) \wedge x \notin C\\
&\text{ iff } x \in (A \cap B) \setmin C.
\end{align*}
Thus, $\forall x(x \in A \cap (B \setmin C) \leftrightarrow x \in (A \cap B) \setmin C)$, so $A \cap (B \setmin C) = (A \cap B) \setmin C$.\qedhere
:::

This proof is based on a fundamental principle of set theory that says that if two sets have exactly the same elements, then they are equal.  This principle is called the *axiom of extensionality*, and it is what justifies the inference, in the last sentence, from $\forall x(x \in A \cap (B \setmin C) \leftrightarrow x \in (A \cap B) \setmin C)$ to $A \cap (B \setmin C) = (A \cap B) \setmin C$.

The heart of the proof is a string of equivalences that, taken together, establish the biconditional statement $x \in A \cap (B \setmin C) \leftrightarrow x \in (A \cap B) \setmin C$.  One can also use this technique to prove a biconditional statement in Lean.  This time we'll simply present the complete proof first, and then explain it afterwards.

```lean
theorem Example_3_4_5 (U : Type)
(A B C : Set U) : A ∩ (B \ C) = (A ∩ B) \ C := by
  apply Set.ext
  fix x : U
  show x ∈ A ∩ (B \ C) ↔ x ∈ (A ∩ B) \ C from
    calc
      x ∈ A ∩ (B \ C) ↔ x ∈ A ∧ (x ∈ B ∧ x ∉ C) := Iff.refl _
                    _ ↔ (x ∈ A ∧ x ∈ B) ∧ x ∉ C := and_assoc.symm
                    _ ↔ x ∈ (A ∩ B) \ C := Iff.refl _
```

The name of the axiom of extensionality in Lean is `Set.ext`, and it is applied in the first step of the Lean proof.  As usual, the `apply` tactic works backwards from the goal.  In other words, after the first line of the proof, the goal is `∀ (x : U), x ∈ A ∩ (B \ C) ↔ x ∈ (A ∩ B) \ C`, because by `Set.ext`, the conclusion of the theorem would follow from this statement.  The rest of the proof then proves this goal by introducing an arbitrary `x` of type `U` and then proving the biconditional by stringing together several equivalences, exactly as in the *HTPI* proof.

The proof of the biconditional is called a *calculational proof*, and it is introduced by the keyword `calc`.  The calculational proof consists of a string of biconditional statements, each of which is provided with a proof.  You can think of the underscore on the left-hand side of each biconditional after the first as standing for the right-hand side of the previous biconditional.

The proofs of the individual biconditionals in the calculational proof require some explanation.  Lean has a large library of theorems that it knows, and you can use those theorems in your proofs.  In particular, `Iff.refl` and `and_assoc` are names of theorems in Lean's library.  You can find out what any theorem says by using the Lean command `#check`.  (Commands that ask Lean for a response generally start with the character `#`.)  If you type `#check Iff.refl` in a Lean file, you will see Lean's response in the Infoview pane:  `Iff.refl : ∀ (a : Prop), a ↔ a`.  So `Iff.refl` is the name of the theorem `∀ (a : Prop), a ↔ a`.  (This theorem says that "iff" has a property called *reflexivity*; we'll discuss reflexivity in Chapter 4.)  Thus, by universal instantiation, for any proposition `a`, `Iff.refl a` is a proof of `a ↔ a`.  This is used to justify the first biconditional in the calculational proof.

But wait!  The first biconditional in the calculational proof is `x ∈ A ∩ (B \ C) ↔ x ∈ A ∧ (x ∈ B ∧ x ∉ C)`, which does not have the form `a ↔ a`.  How can it be justified by the theorem `Iff.refl`?  Recall that Lean doesn't need to be told to write out definitions of mathematical notation; it does that automatically.  When the definitions of the set theory notation are written out, the first line of the calculational proof becomes `x ∈ A ∧ (x ∈ B ∧ x ∉ C) ↔ x ∈ A ∧ (x ∈ B ∧ x ∉ C)`, which *does* have the form `a ↔ a`, so it can be proven with the term-mode proof `Iff.refl _`.  Note that we are using an underscore here to ask Lean to figure out what to plug in for `a`.  This saves us the trouble of writing out the full term-mode proof, which would be `Iff.refl (x ∈ A ∧ (x ∈ B ∧ x ∉ C))`.  The lesson of this example is that the theorem `Iff.refl` is more powerful than it looks.  Not only can we use `Iff.refl _` to prove statements of the form `a ↔ a`, we can also use it to prove statements of the form `a ↔ a'`, if `a` and `a'` reduce to the same thing when definitions are filled in.  We say in this case that `a` and `a'` are *definitionally equal*.  This explains the third line of the calculational proof, which is also justified by the proof `Iff.refl _`.

The second line uses the theorem `and_assoc`.  If you type `#check and_assoc`, Lean's response is somewhat cryptic:

::: {.ind}
```
and_assoc : (?m.4075 ∧ ?m.4076) ∧ ?m.4077 ↔ ?m.4075 ∧ ?m.4076 ∧ ?m.4077
```
:::

The explanation for this cryptic response is that `and_assoc` has implicit arguments, and they are not displayed by default.  To see the implicit arguments, you must type `#check @and_assoc`.  Lean's response is:

::: {.ind}
```
@and_assoc : ∀ {a b c : Prop}, (a ∧ b) ∧ c ↔ a ∧ b ∧ c
```
:::

which is shorthand for

::: {.ind}
```
@and_assoc : ∀ {a : Prop}, ∀ {b : Prop}, ∀ {c : Prop},
              (a ∧ b) ∧ c ↔ a ∧ (b ∧ c)
```
:::

(Recall that Lean groups the logical connectives to the right, which means that it interprets `a ∧ b ∧ c` as `a ∧ (b ∧ c)`.)  This is the associative law for "and" (see Section 1.2 of *HTPI*).  Since `a`, `b`, and `c` are implicit, Lean will recognize `and_assoc` as a proof of any statement of the form `(a ∧ b) ∧ c ↔ a ∧ (b ∧ c)`, where `a`, `b`, and `c` can be replaced with any propositions.  Lean doesn't need to be told what propositions are being used as `a`, `b`, and `c`; it will figure that out for itself.  Unfortunately, the second biconditional in the calculational proof is `x ∈ A ∧ (x ∈ B ∧ x ∉ C) ↔ (x ∈ A ∧ x ∈ B) ∧ x ∉ C`, which has the form `a ∧ (b ∧ c) ↔ (a ∧ b) ∧ c`, not `(a ∧ b) ∧ c ↔ a ∧ (b ∧ c)`.  To account for this discrepancy, we use the fact that if `h` is a proof of any biconditional `P ↔ Q`, then `h.symm` is a proof of `Q ↔ P`.  Thus `and_assoc.symm` proves the second biconditional in the calculational proof.  (By the way, the *HTPI* proof avoids any mention of the associativity of "and" by simply leaving out parentheses in the conjunction $x \in A \wedge x \in B \wedge x \notin C$.  As explained in Section 1.2 of *HTPI*, this represents an implicit use of the associativity of "and.")

You can get a better understanding of the first step of our last proof by typing `#check @Set.ext`.  The result is

::: {.ind}
```
@Set.ext : ∀ {α : Type u_1} {a b : Set α},
            (∀ (x : α), x ∈ a ↔ x ∈ b) → a = b
```
:::

which is shorthand for

::: {.ind}
```
@Set.ext : ∀ {α : Type u_1}, ∀ {a : Set α}, ∀ {b : Set α},
            (∀ (x : α), x ∈ a ↔ x ∈ b) → a = b
```
:::

Ignoring the `u_1`, whose significance won't be important to us, this means that `Set.ext` can be used to prove any statement of the form `(∀ (x : α), x ∈ a ↔ x ∈ b) → a = b`, where `α` can be replaced by any type and `a` and `b` can be replaced by any sets of objects of type `α`.  Make sure you understand how this explains the effect of the tactic `apply Set.ext` in the first step of our last proof.  Almost all of our proofs that two sets are equal will start with `apply Set.ext`.

## 3.5.  Proofs Involving Disjunctions

A common proof method for dealing with givens or goals that are disjunctions is *proof by cases*.  Here's how it works.

#### To use a given of the form `P ∨ Q`:

::: {.ind}
Break your proof into cases.  For case 1, assume that `P` is true and use this assumption to prove the goal.  For case 2, assume that `Q` is true and prove the goal.
:::

In Lean, you can break a proof into cases by using the `by_cases` tactic.  If you have a given `h : P ∨ Q`, then the tactic `by_cases on h` will break your proof into two cases.  For the first case, the given `h` will be changed to `h : P`, and for the second, it will be changed to `h : Q`; the goal for both cases will be the same as the original goal.  Thus, the effect of the `by_cases on h` tactic is as follows:

::: {.lftrt}
::: {.bef}
```state
!! ⋮
h : P ∨ Q
⊢ goal
```
:::

::: {.aft}
```state
case Case_1
!! ⋮
h : P
⊢ goal
case Case_2
!! ⋮
h : Q
⊢ goal
```
:::
:::

Notice that the original given `h : P ∨ Q` gets *replaced* by `h : P` in case 1 and `h : Q` in case 2.  This is usually what is most convenient, but if you write `by_cases on h with h1`, then the original given `h` will be preserved, and new givens `h1 : P` and `h1 : Q` will be added to cases 1 and 2, respectively.  If you want different names for the new givens in the two cases, then use `by_cases on h with h1 h2` to add the new given `h1 : P` in case 1 and `h2 : Q` in case 2.

You can also follow `by_cases on` with a proof of a disjunction that is more complicated than a single identifier.  In that cases you will want to add `with` to specify the identifiers to be used for the new assumptions in the two cases.  Another variant is that you can use the tactic `by_cases h : P` to break your proof into two cases, with the new assumptions being `h : P` in case 1 and `h : ¬P` in case 2.  In other words, the effect of `by_cases h : P` is the same as adding the new given `h : P ∨ ¬P` (which, of course, is a tautology) and then using the tactic `by_cases on h`.

There are two introduction rules that you can use in Lean to prove a goal of the form `P ∨ Q`.  If you have `h : P`, then Lean will accept `Or.intro_left h` as a proof of `P ∨ Q`, and if you have `h : Q`, then `Or.intro_right h` is a proof of `P ∨ Q`.  There are shortened forms `Or.inl` and `Or.inr` for `Or.intro_left` and `Or.intro_right`, respectively.

But often, when your goal has the form `P ∨ Q`, you will be unable to prove `P`, and also unable to prove `Q`.  Proof by cases can help in that situation as well.

#### To prove a goal of the form `P ∨ Q`:

::: {.ind}
Break your proof into cases.  In each case, either prove `P` or prove `Q`.
:::

Example 3.5.2 from *HTPI* illustrates these strategies:

::: {.inout}
::: {.inpt}
```lean
theorem Example_3_5_2
(U : Type) (A B C : Set U) :
A \ (B \ C) ⊆ (A \ B) ∪ C := by
```
:::

::: {.outpt}
```state
U : Type
A B C : Set U
⊢ A \ (B \ C) ⊆ A \ B ∪ C
```
:::
:::

The `define` tactic would rewrite the goal as `∀ {a : U}, a ∈ A \ (B \ C) → a ∈ A \ B ∪ C`, which suggests that our next two tactics should be `fix x : U` and `assume h1 : x ∈ A \ (B \ C)`.  But as we have seen before, if you know what the result of the `define` tactic is going to be, then there is no need to use it.  After introducing `x` as an arbitrary element of `A \ (B \ C)`, we write out the definitions of our new given and goal to help guide our next strategy choice:

::: {.inout}
::: {.inpt}
```lean
theorem Example_3_5_2
(U : Type) (A B C : Set U) :
A \ (B \ C) ⊆ (A \ B) ∪ C := by
  fix x : U
  assume h1 : x ∈ A \ (B \ C)
  define
  define at h1
```
:::

::: {.outpt}
```state
U : Type
A B C : Set U
x : U
h1 : x ∈ A ∧ ¬x ∈ B \ C
⊢ x ∈ A \ B ∨ x ∈ C
```
:::
:::

The goal is now a disjunction, which suggests that proof by cases might be helpful.  But what cases should we use?  The key is to look at the meaning of the right half of the given `h1`.  The meaning of `¬x ∈ B \ C` is `¬(x ∈ B ∧ x ∉ C)`, which, by one of the De Morgan laws, is equivalent to `x ∉ B ∨ x ∈ C`.

::: {.inout}
::: {.inpt}
```lean
theorem Example_3_5_2
(U : Type) (A B C : Set U) :
A \ (B \ C) ⊆ (A \ B) ∪ C := by
  fix x : U
  assume h1 : x ∈ A \ (B \ C)
  define
  define at h1
  have h2 : ¬x ∈ B \ C := h1.right
  define at h2
  demorgan at h2
```
:::

::: {.outpt}
```state
U : Type
A B C : Set U
x : U
h1 : x ∈ A ∧ ¬x ∈ B \ C
h2 : ¬x ∈ B ∨ x ∈ C
⊢ x ∈ A \ B ∨ x ∈ C
```
:::
:::

Aha!  The new given `h2` is a disjunction, which suggests what cases we should use:

::: {.inout}
::: {.inpt}
```lean
theorem Example_3_5_2
(U : Type) (A B C : Set U) :
A \ (B \ C) ⊆ (A \ B) ∪ C := by
  fix x : U
  assume h1 : x ∈ A \ (B \ C)
  define
  define at h1
  have h2 : ¬x ∈ B \ C := h1.right
  define at h2
  demorgan at h2
  by_cases on h2
```
:::

::: {.outpt}
```state
case Case_1
U : Type
A B C : Set U
x : U
h1 : x ∈ A ∧ ¬x ∈ B \ C
h2 : ¬x ∈ B
⊢ x ∈ A \ B ∨ x ∈ C
case Case_2
U : Type
A B C : Set U
x : U
h1 : x ∈ A ∧ ¬x ∈ B \ C
h2 : x ∈ C
⊢ x ∈ A \ B ∨ x ∈ C
```
:::
:::

Looking at the givens `h1` and `h2` in both cases, it is not hard to see that we should be able to prove `x ∈ A \ B` in case 1 and `x ∈ C` in case 2.  Thus, we will apply `Or.inl` in case 1 and `Or.inr` in case 2.  Focusing first on case 1, we get:

::: {.inout}
::: {.inpt}
```lean
theorem Example_3_5_2
(U : Type) (A B C : Set U) :
A \ (B \ C) ⊆ (A \ B) ∪ C := by
  fix x : U
  assume h1 : x ∈ A \ (B \ C)
  define
  define at h1
  have h2 : ¬x ∈ B \ C := h1.right
  define at h2
  demorgan at h2
  by_cases on h2
  -- Case 1
  apply Or.inl
```
:::

::: {.outpt}
```state
case Case_1.h
U : Type
A B C : Set U
x : U
h1 : x ∈ A ∧ ¬x ∈ B \ C
h2 : ¬x ∈ B
⊢ x ∈ A \ B
```
:::
:::

The tactic `apply Or.inl` changed the goal for case 1 to the left half of the original goal, `x ∈ A \ B`.  Since this means `x ∈ A ∧ x ∉ B`, we can complete case 1 by combining `h1.left` with `h2`.

::: {.inout}
::: {.inpt}
```lean
theorem Example_3_5_2
(U : Type) (A B C : Set U) :
A \ (B \ C) ⊆ (A \ B) ∪ C := by
  fix x : U
  assume h1 : x ∈ A \ (B \ C)
  define
  define at h1
  have h2 : ¬x ∈ B \ C := h1.right
  define at h2
  demorgan at h2
  by_cases on h2
  -- Case 1
  apply Or.inl
  show x ∈ A \ B from And.intro h1.left h2
```
:::

::: {.outpt}
```state
case Case_2
U : Type
A B C : Set U
x : U
h1 : x ∈ A ∧ ¬x ∈ B \ C
h2 : x ∈ C
⊢ x ∈ A \ B ∨ x ∈ C
```
:::
:::

Case 2 is similar, using `Or.inr` and `h2`

::: {.inout}
::: {.inpt}
```lean
theorem Example_3_5_2
(U : Type) (A B C : Set U) :
A \ (B \ C) ⊆ (A \ B) ∪ C := by
  fix x : U
  assume h1 : x ∈ A \ (B \ C)
  define
  define at h1
  have h2 : ¬x ∈ B \ C := h1.right
  define at h2
  demorgan at h2
  by_cases on h2
  -- Case 1
  apply Or.inl
  show x ∈ A \ B from And.intro h1.left h2
  -- Case 2
  apply Or.inr
  show x ∈ C from h2
```
:::

::: {.outpt}
```state
!!Goals accomplished 🎉
```
:::
:::



*HTPI* gives two strategies for using a given of the form `P ∨ Q`:

#### To use a given of the form `P ∨ Q`:

1.  Break your proof into cases.  For case 1, assume that `P` is true and use this assumption to prove the goal.  For case 2, assume that `Q` is true and prove the goal.
2.  If you are also given `¬P`, or you can prove that `P` is false, then you can use this given to conclude that `Q` is true.  Similarly, if you are given `¬Q` or can prove that `Q` is false, then you can conclude that `P` is true.

